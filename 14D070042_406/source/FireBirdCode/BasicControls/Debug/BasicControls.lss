
BasicControls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800200  00001436  000014ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001436  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800242  00800242  0000150c  2**0
                  ALLOC
  3 .stab         000033fc  00000000  00000000  0000150c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000009aa  00000000  00000000  00004908  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  000052b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ad  00000000  00000000  00005358  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000357  00000000  00000000  00006a05  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000070b  00000000  00000000  00006d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000388  00000000  00000000  00007468  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  000077f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001349  00000000  00000000  00007d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      18:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 e2 04 	jmp	0x9c4	; 0x9c4 <__vector_25>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <rightd+0x16>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e6 e3       	ldi	r30, 0x36	; 54
     17e:	f4 e1       	ldi	r31, 0x14	; 20
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a2 34       	cpi	r26, 0x42	; 66
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a2 e4       	ldi	r26, 0x42	; 66
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	af 34       	cpi	r26, 0x4F	; 79
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <main>
     1a4:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <buzzer_pin_config>:
	uart0_init();                       //Initailize UART1 for serial communiaction
	sei();                              //Enables the global interrupts
}
void buzzer_pin_config (void)    //configuring the buzzer
{
	DDRC = DDRC | 0x08;
     1ac:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;
     1ae:	43 98       	cbi	0x08, 3	; 8
}
     1b0:	08 95       	ret

000001b2 <motor_pin_config>:
{
	PORTC = PORTC & 0xF7;
}
void motor_pin_config(void)        //configuring all default pins for enabling motors
{
	DDRA=DDRA | 0x0F;         //pins:D0,D1,D2,D3 are used for controlling the motion of bot....taking OR function because lower nimble will be unaffected by it and any change in upper nimble will easily reflect
     1b2:	81 b1       	in	r24, 0x01	; 1
     1b4:	8f 60       	ori	r24, 0x0F	; 15
     1b6:	81 b9       	out	0x01, r24	; 1
	PORTA=PORTA & 0xF0;       //Initially the motor is in switched off state
     1b8:	82 b1       	in	r24, 0x02	; 2
     1ba:	80 7f       	andi	r24, 0xF0	; 240
     1bc:	82 b9       	out	0x02, r24	; 2
	DDRL=DDRL | 0x18;         //Pins:L3,L4 are used for enabling motor driver IC left and right channel respectively
     1be:	ea e0       	ldi	r30, 0x0A	; 10
     1c0:	f1 e0       	ldi	r31, 0x01	; 1
     1c2:	80 81       	ld	r24, Z
     1c4:	88 61       	ori	r24, 0x18	; 24
     1c6:	80 83       	st	Z, r24
	PORTL=PORTL | 0x18;	     //Here we have enabled both right and left channel(Port L is used basically for velocity control using PWM:Pulse Width Modulation)
     1c8:	eb e0       	ldi	r30, 0x0B	; 11
     1ca:	f1 e0       	ldi	r31, 0x01	; 1
     1cc:	80 81       	ld	r24, Z
     1ce:	88 61       	ori	r24, 0x18	; 24
     1d0:	80 83       	st	Z, r24
}
     1d2:	08 95       	ret

000001d4 <timer5_init>:
void timer5_init(void)    //Initializing the timer 5 which is used for PWM of the signal given to motors for controlling their speed
{
	TCCR5A = 0xA9;
     1d4:	89 ea       	ldi	r24, 0xA9	; 169
     1d6:	80 93 20 01 	sts	0x0120, r24
	TCCR5B = 0x0B;
     1da:	8b e0       	ldi	r24, 0x0B	; 11
     1dc:	80 93 21 01 	sts	0x0121, r24
	TCNT5H = 0xFF;
     1e0:	8f ef       	ldi	r24, 0xFF	; 255
     1e2:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x00;
     1e6:	10 92 24 01 	sts	0x0124, r1
	OCR5AH = 0x00;
     1ea:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0x00;    //Keeping the velocity zero as initial of the left motor
     1ee:	10 92 28 01 	sts	0x0128, r1
	OCR5BH = 0x00;
     1f2:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0x00;    //Keeping the velocity zero as initial of the right motor
     1f6:	10 92 2a 01 	sts	0x012A, r1
}
     1fa:	08 95       	ret

000001fc <adc_pin_config>:
	lcd_set_4bit();                //Doing the job of fully starting the LCD in this function itself instead of doing it in main program
	lcd_init();
}
void adc_pin_config (void)         //Configure ADC Ports
{
	DDRF= 0x00;
     1fc:	10 ba       	out	0x10, r1	; 16
	DDRK= 0x00;
     1fe:	10 92 07 01 	sts	0x0107, r1
}
     202:	08 95       	ret

00000204 <adc_init>:
void adc_init(void)                   //Set Register Values for starting ADC
{
	ADCSRA = 0x86;
     204:	86 e8       	ldi	r24, 0x86	; 134
     206:	80 93 7a 00 	sts	0x007A, r24
	ADCSRB = 0x00;
     20a:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;
     20e:	80 e2       	ldi	r24, 0x20	; 32
     210:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     214:	80 e8       	ldi	r24, 0x80	; 128
     216:	80 bf       	out	0x30, r24	; 48
}
     218:	08 95       	ret

0000021a <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
     21a:	e1 ec       	ldi	r30, 0xC1	; 193
     21c:	f0 e0       	ldi	r31, 0x00	; 0
     21e:	10 82       	st	Z, r1
	UCSR0A = 0x00;
     220:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
     224:	86 e0       	ldi	r24, 0x06	; 6
     226:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
     22a:	8f e5       	ldi	r24, 0x5F	; 95
     22c:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
     230:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
     234:	88 e9       	ldi	r24, 0x98	; 152
     236:	80 83       	st	Z, r24
}
     238:	08 95       	ret

0000023a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     23a:	86 e6       	ldi	r24, 0x66	; 102
     23c:	9e e0       	ldi	r25, 0x0E	; 14
     23e:	01 97       	sbiw	r24, 0x01	; 1
     240:	f1 f7       	brne	.-4      	; 0x23e <lcd_set_4bit+0x4>
     242:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     244:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     246:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     248:	80 e3       	ldi	r24, 0x30	; 48
     24a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     24c:	42 9a       	sbi	0x08, 2	; 8
     24e:	ef ef       	ldi	r30, 0xFF	; 255
     250:	f7 e4       	ldi	r31, 0x47	; 71
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	f1 f7       	brne	.-4      	; 0x252 <lcd_set_4bit+0x18>
     256:	00 c0       	rjmp	.+0      	; 0x258 <lcd_set_4bit+0x1e>
     258:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     25a:	42 98       	cbi	0x08, 2	; 8
     25c:	e6 e6       	ldi	r30, 0x66	; 102
     25e:	fe e0       	ldi	r31, 0x0E	; 14
     260:	31 97       	sbiw	r30, 0x01	; 1
     262:	f1 f7       	brne	.-4      	; 0x260 <lcd_set_4bit+0x26>
     264:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     266:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     268:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     26a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     26c:	42 9a       	sbi	0x08, 2	; 8
     26e:	ef ef       	ldi	r30, 0xFF	; 255
     270:	f7 e4       	ldi	r31, 0x47	; 71
     272:	31 97       	sbiw	r30, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <lcd_set_4bit+0x38>
     276:	00 c0       	rjmp	.+0      	; 0x278 <lcd_set_4bit+0x3e>
     278:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     27a:	42 98       	cbi	0x08, 2	; 8
     27c:	e6 e6       	ldi	r30, 0x66	; 102
     27e:	fe e0       	ldi	r31, 0x0E	; 14
     280:	31 97       	sbiw	r30, 0x01	; 1
     282:	f1 f7       	brne	.-4      	; 0x280 <lcd_set_4bit+0x46>
     284:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     286:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     288:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     28a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     28c:	42 9a       	sbi	0x08, 2	; 8
     28e:	8f ef       	ldi	r24, 0xFF	; 255
     290:	97 e4       	ldi	r25, 0x47	; 71
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <lcd_set_4bit+0x58>
     296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_set_4bit+0x5e>
     298:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     29a:	42 98       	cbi	0x08, 2	; 8
     29c:	e6 e6       	ldi	r30, 0x66	; 102
     29e:	fe e0       	ldi	r31, 0x0E	; 14
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <lcd_set_4bit+0x66>
     2a4:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     2a6:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     2a8:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     2aa:	80 e2       	ldi	r24, 0x20	; 32
     2ac:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     2ae:	42 9a       	sbi	0x08, 2	; 8
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
     2b2:	97 e4       	ldi	r25, 0x47	; 71
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <lcd_set_4bit+0x7a>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <lcd_set_4bit+0x80>
     2ba:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     2bc:	42 98       	cbi	0x08, 2	; 8

	
}
     2be:	08 95       	ret

000002c0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     2c0:	98 b1       	in	r25, 0x08	; 8
     2c2:	9f 70       	andi	r25, 0x0F	; 15
     2c4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     2c6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     2c8:	28 2f       	mov	r18, r24
     2ca:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     2cc:	92 2b       	or	r25, r18
     2ce:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     2d0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2d2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2d4:	42 9a       	sbi	0x08, 2	; 8
     2d6:	ef ef       	ldi	r30, 0xFF	; 255
     2d8:	f7 e4       	ldi	r31, 0x47	; 71
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_wr_command+0x1a>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_wr_command+0x20>
     2e0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     2e2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     2e4:	98 b1       	in	r25, 0x08	; 8
     2e6:	9f 70       	andi	r25, 0x0F	; 15
     2e8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     2ea:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     2ec:	82 95       	swap	r24
     2ee:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     2f0:	89 2b       	or	r24, r25
     2f2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     2f4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     2f6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     2f8:	42 9a       	sbi	0x08, 2	; 8
     2fa:	8f ef       	ldi	r24, 0xFF	; 255
     2fc:	97 e4       	ldi	r25, 0x47	; 71
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_wr_command+0x3e>
     302:	00 c0       	rjmp	.+0      	; 0x304 <lcd_wr_command+0x44>
     304:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     306:	42 98       	cbi	0x08, 2	; 8
}
     308:	08 95       	ret

0000030a <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     30a:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_set_4bit>
     30e:	86 e6       	ldi	r24, 0x66	; 102
     310:	9e e0       	ldi	r25, 0x0E	; 14
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <lcd_init+0x8>
     316:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     318:	88 e2       	ldi	r24, 0x28	; 40
     31a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
	lcd_wr_command(0x01);
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
	lcd_wr_command(0x06);
     324:	86 e0       	ldi	r24, 0x06	; 6
     326:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     32a:	8e e0       	ldi	r24, 0x0E	; 14
     32c:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
	lcd_wr_command(0x80);
     330:	80 e8       	ldi	r24, 0x80	; 128
     332:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
		
}
     336:	08 95       	ret

00000338 <lcd_config>:
	OCR5BH = 0x00;
	OCR5BL = 0x00;    //Keeping the velocity zero as initial of the right motor
}
void lcd_config(void)               //Configuring LCD
{
	DDRC=DDRC | 0xF7;               //Pin C3 is used for controlling buzzer....pins:c4-c7 are used for controlling DB4-BD7 on LCD....c0 for RS(register select),c1 for RW(Read Write), c3 for EN(Enable)
     338:	87 b1       	in	r24, 0x07	; 7
     33a:	87 6f       	ori	r24, 0xF7	; 247
     33c:	87 b9       	out	0x07, r24	; 7
	PORTC=PORTC & 0x08;
     33e:	88 b1       	in	r24, 0x08	; 8
     340:	88 70       	andi	r24, 0x08	; 8
     342:	88 b9       	out	0x08, r24	; 8
	lcd_set_4bit();                //Doing the job of fully starting the LCD in this function itself instead of doing it in main program
     344:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_set_4bit>
	lcd_init();
     348:	0e 94 85 01 	call	0x30a	; 0x30a <lcd_init>
}
     34c:	08 95       	ret

0000034e <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     34e:	98 b1       	in	r25, 0x08	; 8
     350:	9f 70       	andi	r25, 0x0F	; 15
     352:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     354:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     356:	28 2f       	mov	r18, r24
     358:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     35a:	92 2b       	or	r25, r18
     35c:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     35e:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     360:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     362:	42 9a       	sbi	0x08, 2	; 8
     364:	ef ef       	ldi	r30, 0xFF	; 255
     366:	f7 e4       	ldi	r31, 0x47	; 71
     368:	31 97       	sbiw	r30, 0x01	; 1
     36a:	f1 f7       	brne	.-4      	; 0x368 <lcd_wr_char+0x1a>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <lcd_wr_char+0x20>
     36e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     370:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     372:	98 b1       	in	r25, 0x08	; 8
     374:	9f 70       	andi	r25, 0x0F	; 15
     376:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     378:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     37a:	82 95       	swap	r24
     37c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     37e:	89 2b       	or	r24, r25
     380:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     382:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     384:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     386:	42 9a       	sbi	0x08, 2	; 8
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	97 e4       	ldi	r25, 0x47	; 71
     38c:	01 97       	sbiw	r24, 0x01	; 1
     38e:	f1 f7       	brne	.-4      	; 0x38c <lcd_wr_char+0x3e>
     390:	00 c0       	rjmp	.+0      	; 0x392 <lcd_wr_char+0x44>
     392:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     394:	42 98       	cbi	0x08, 2	; 8
}
     396:	08 95       	ret

00000398 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     398:	80 e8       	ldi	r24, 0x80	; 128
     39a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
}
     39e:	08 95       	ret

000003a0 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     3a0:	cf 93       	push	r28
     3a2:	df 93       	push	r29
     3a4:	ec 01       	movw	r28, r24
	while(*str != '\0')
     3a6:	88 81       	ld	r24, Y
     3a8:	88 23       	and	r24, r24
     3aa:	31 f0       	breq	.+12     	; 0x3b8 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     3ac:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     3ae:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     3b2:	89 91       	ld	r24, Y+
     3b4:	88 23       	and	r24, r24
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	79 f0       	breq	.+30     	; 0x3e0 <lcd_cursor+0x22>
     3c2:	83 30       	cpi	r24, 0x03	; 3
     3c4:	18 f4       	brcc	.+6      	; 0x3cc <lcd_cursor+0xe>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	c9 f4       	brne	.+50     	; 0x3fc <lcd_cursor+0x3e>
     3ca:	05 c0       	rjmp	.+10     	; 0x3d6 <lcd_cursor+0x18>
     3cc:	83 30       	cpi	r24, 0x03	; 3
     3ce:	69 f0       	breq	.+26     	; 0x3ea <lcd_cursor+0x2c>
     3d0:	84 30       	cpi	r24, 0x04	; 4
     3d2:	a1 f4       	brne	.+40     	; 0x3fc <lcd_cursor+0x3e>
     3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     3d6:	86 2f       	mov	r24, r22
     3d8:	81 58       	subi	r24, 0x81	; 129
     3da:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
     3de:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     3e0:	86 2f       	mov	r24, r22
     3e2:	81 54       	subi	r24, 0x41	; 65
     3e4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
     3e8:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     3ea:	86 2f       	mov	r24, r22
     3ec:	8d 56       	subi	r24, 0x6D	; 109
     3ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
     3f2:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     3f4:	86 2f       	mov	r24, r22
     3f6:	8d 52       	subi	r24, 0x2D	; 45
     3f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <lcd_wr_command>
     3fc:	08 95       	ret

000003fe <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	8a 01       	movw	r16, r20
     408:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     40a:	88 23       	and	r24, r24
     40c:	11 f0       	breq	.+4      	; 0x412 <lcd_print+0x14>
     40e:	66 23       	and	r22, r22
     410:	19 f4       	brne	.+6      	; 0x418 <lcd_print+0x1a>
	{
		lcd_home();
     412:	0e 94 cc 01 	call	0x398	; 0x398 <lcd_home>
     416:	02 c0       	rjmp	.+4      	; 0x41c <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     418:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
	}
	if(digits==5 || flag==1)
     41c:	c5 30       	cpi	r28, 0x05	; 5
     41e:	d1 05       	cpc	r29, r1
     420:	71 f4       	brne	.+28     	; 0x43e <lcd_print+0x40>
	{
		million=value/10000+48;
     422:	c8 01       	movw	r24, r16
     424:	60 e1       	ldi	r22, 0x10	; 16
     426:	77 e2       	ldi	r23, 0x27	; 39
     428:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     42c:	cb 01       	movw	r24, r22
     42e:	c0 96       	adiw	r24, 0x30	; 48
     430:	90 93 43 02 	sts	0x0243, r25
     434:	80 93 42 02 	sts	0x0242, r24
		lcd_wr_char(million);
     438:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
     43c:	03 c0       	rjmp	.+6      	; 0x444 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     43e:	c4 30       	cpi	r28, 0x04	; 4
     440:	d1 05       	cpc	r29, r1
     442:	b9 f4       	brne	.+46     	; 0x472 <lcd_print+0x74>
	{
		temp = value/1000;
     444:	c8 01       	movw	r24, r16
     446:	68 ee       	ldi	r22, 0xE8	; 232
     448:	73 e0       	ldi	r23, 0x03	; 3
     44a:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     44e:	cb 01       	movw	r24, r22
     450:	70 93 45 02 	sts	0x0245, r23
     454:	60 93 44 02 	sts	0x0244, r22
		thousand = temp%10 + 48;
     458:	6a e0       	ldi	r22, 0x0A	; 10
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     460:	c0 96       	adiw	r24, 0x30	; 48
     462:	90 93 4e 02 	sts	0x024E, r25
     466:	80 93 4d 02 	sts	0x024D, r24
		lcd_wr_char(thousand);
     46a:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
		flag=1;
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	01 c0       	rjmp	.+2      	; 0x474 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     472:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     474:	c3 30       	cpi	r28, 0x03	; 3
     476:	d1 05       	cpc	r29, r1
     478:	11 f0       	breq	.+4      	; 0x47e <lcd_print+0x80>
     47a:	81 30       	cpi	r24, 0x01	; 1
     47c:	b1 f4       	brne	.+44     	; 0x4aa <lcd_print+0xac>
	{
		temp = value/100;
     47e:	c8 01       	movw	r24, r16
     480:	64 e6       	ldi	r22, 0x64	; 100
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     488:	cb 01       	movw	r24, r22
     48a:	70 93 45 02 	sts	0x0245, r23
     48e:	60 93 44 02 	sts	0x0244, r22
		hundred = temp%10 + 48;
     492:	6a e0       	ldi	r22, 0x0A	; 10
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     49a:	c0 96       	adiw	r24, 0x30	; 48
     49c:	90 93 4a 02 	sts	0x024A, r25
     4a0:	80 93 49 02 	sts	0x0249, r24
		lcd_wr_char(hundred);
     4a4:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
		flag=1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     4aa:	c2 30       	cpi	r28, 0x02	; 2
     4ac:	d1 05       	cpc	r29, r1
     4ae:	11 f0       	breq	.+4      	; 0x4b4 <lcd_print+0xb6>
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	b1 f4       	brne	.+44     	; 0x4e0 <lcd_print+0xe2>
	{
		temp = value/10;
     4b4:	2a e0       	ldi	r18, 0x0A	; 10
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	c8 01       	movw	r24, r16
     4ba:	b9 01       	movw	r22, r18
     4bc:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     4c0:	cb 01       	movw	r24, r22
     4c2:	70 93 45 02 	sts	0x0245, r23
     4c6:	60 93 44 02 	sts	0x0244, r22
		tens = temp%10 + 48;
     4ca:	b9 01       	movw	r22, r18
     4cc:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     4d0:	c0 96       	adiw	r24, 0x30	; 48
     4d2:	90 93 47 02 	sts	0x0247, r25
     4d6:	80 93 46 02 	sts	0x0246, r24
		lcd_wr_char(tens);
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
		flag=1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     4e0:	c1 30       	cpi	r28, 0x01	; 1
     4e2:	d1 05       	cpc	r29, r1
     4e4:	11 f0       	breq	.+4      	; 0x4ea <lcd_print+0xec>
     4e6:	81 30       	cpi	r24, 0x01	; 1
     4e8:	61 f4       	brne	.+24     	; 0x502 <lcd_print+0x104>
	{
		unit = value%10 + 48;
     4ea:	c8 01       	movw	r24, r16
     4ec:	6a e0       	ldi	r22, 0x0A	; 10
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	0e 94 05 0a 	call	0x140a	; 0x140a <__udivmodhi4>
     4f4:	c0 96       	adiw	r24, 0x30	; 48
     4f6:	90 93 4c 02 	sts	0x024C, r25
     4fa:	80 93 4b 02 	sts	0x024B, r24
		lcd_wr_char(unit);
     4fe:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
	}
	if(digits>5)
     502:	c6 30       	cpi	r28, 0x06	; 6
     504:	d1 05       	cpc	r29, r1
     506:	1c f0       	brlt	.+6      	; 0x50e <lcd_print+0x110>
	{
		lcd_wr_char('E');
     508:	85 e4       	ldi	r24, 0x45	; 69
     50a:	0e 94 a7 01 	call	0x34e	; 0x34e <lcd_wr_char>
	}
	
}
     50e:	df 91       	pop	r29
     510:	cf 91       	pop	r28
     512:	1f 91       	pop	r17
     514:	0f 91       	pop	r16
     516:	08 95       	ret

00000518 <init_devices>:
/*************FUNCTIONS INITIALIZING PORTS************/


void init_devices(void)
{
	motor_pin_config();
     518:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <motor_pin_config>
	timer5_init();
     51c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <timer5_init>
	lcd_config();
     520:	0e 94 9c 01 	call	0x338	; 0x338 <lcd_config>
	adc_init();
     524:	0e 94 02 01 	call	0x204	; 0x204 <adc_init>
	adc_pin_config();
     528:	0e 94 fe 00 	call	0x1fc	; 0x1fc <adc_pin_config>
	buzzer_pin_config();
     52c:	0e 94 d6 00 	call	0x1ac	; 0x1ac <buzzer_pin_config>
	uart0_init();                       //Initailize UART1 for serial communiaction
     530:	0e 94 0d 01 	call	0x21a	; 0x21a <uart0_init>
	sei();                              //Enables the global interrupts
     534:	78 94       	sei
}
     536:	08 95       	ret

00000538 <buzzer_on>:
	DDRC = DDRC | 0x08;
	PORTC = PORTC & 0xF7;
}
void buzzer_on (void)
{
	PORTC = PORTC | 0x08;
     538:	43 9a       	sbi	0x08, 3	; 8
}
     53a:	08 95       	ret

0000053c <buzzer_off>:
void buzzer_off (void)
{
	PORTC = PORTC & 0xF7;
     53c:	43 98       	cbi	0x08, 3	; 8
}
     53e:	08 95       	ret

00000540 <forward>:
/***************FUNCTIONS FOR MOTION CONTROL***********/


void forward(void)
{
	char PortARestore=0xF0 & PORTA;     //Now PortARestore will contain upper nimble of PORT A and 0000 as lower nimble
     540:	82 b1       	in	r24, 0x02	; 2
     542:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x06 | PortARestore;          //Now this will contain upper nimble of PORT A (unaltered) and lower nimble containing the required command
     544:	86 60       	ori	r24, 0x06	; 6
     546:	82 b9       	out	0x02, r24	; 2
}
     548:	08 95       	ret

0000054a <backward>:
     54a:	8f ef       	ldi	r24, 0xFF	; 255
     54c:	9f e3       	ldi	r25, 0x3F	; 63
     54e:	a2 e0       	ldi	r26, 0x02	; 2
     550:	81 50       	subi	r24, 0x01	; 1
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	a0 40       	sbci	r26, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <backward+0x6>
     558:	00 c0       	rjmp	.+0      	; 0x55a <backward+0x10>
     55a:	00 00       	nop
void backward(void)
{
	_delay_ms(50);
	char PortARestore=0xF0 & PORTA;
     55c:	82 b1       	in	r24, 0x02	; 2
     55e:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x09 | PortARestore;
     560:	89 60       	ori	r24, 0x09	; 9
     562:	82 b9       	out	0x02, r24	; 2
}
     564:	08 95       	ret

00000566 <softRight>:
void softRight(void)
{
	char PortARestore=0xF0 & PORTA;
     566:	82 b1       	in	r24, 0x02	; 2
     568:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x04 | PortARestore;
     56a:	84 60       	ori	r24, 0x04	; 4
     56c:	82 b9       	out	0x02, r24	; 2
}
     56e:	08 95       	ret

00000570 <right>:
void right(void)
{
	char PortARestore=0xF0 & PORTA;
     570:	82 b1       	in	r24, 0x02	; 2
     572:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x05 | PortARestore;
     574:	85 60       	ori	r24, 0x05	; 5
     576:	82 b9       	out	0x02, r24	; 2
}
     578:	08 95       	ret

0000057a <softLeft>:
void softLeft(void)
{
	char PortARestore=0xF0 & PORTA;
     57a:	82 b1       	in	r24, 0x02	; 2
     57c:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x02 | PortARestore;
     57e:	82 60       	ori	r24, 0x02	; 2
     580:	82 b9       	out	0x02, r24	; 2
}
     582:	08 95       	ret

00000584 <left>:
void left(void)
{
	char PortARestore=0xF0 & PORTA;
     584:	82 b1       	in	r24, 0x02	; 2
     586:	80 7f       	andi	r24, 0xF0	; 240
	PORTA=0x0A | PortARestore;
     588:	8a 60       	ori	r24, 0x0A	; 10
     58a:	82 b9       	out	0x02, r24	; 2
}
     58c:	08 95       	ret

0000058e <stop>:
void stop(void)
{
	char PortARestore= 0xF0 & PORTA;
     58e:	82 b1       	in	r24, 0x02	; 2
     590:	80 7f       	andi	r24, 0xF0	; 240
	PORTA =0x00 | PortARestore;
     592:	82 b9       	out	0x02, r24	; 2
}
     594:	08 95       	ret

00000596 <leftd>:
	_delay_ms(6);
	stop();
}
/* OUR leftd & rightd FUNCTION PERFORMS ROTATION OF ONLY CERTAIN ANGLES, THAT TOO NOT ACCURATELY */
void leftd(int degree)
{
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
     59a:	ec 01       	movw	r28, r24
	left();
     59c:	0e 94 c2 02 	call	0x584	; 0x584 <left>
	if(degree==7)
     5a0:	c7 30       	cpi	r28, 0x07	; 7
     5a2:	d1 05       	cpc	r29, r1
     5a4:	51 f4       	brne	.+20     	; 0x5ba <leftd+0x24>
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	a8 e0       	ldi	r26, 0x08	; 8
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	a0 40       	sbci	r26, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <leftd+0x16>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <leftd+0x20>
     5b6:	00 00       	nop
     5b8:	26 c0       	rjmp	.+76     	; 0x606 <leftd+0x70>
	_delay_ms(200);
	else if(degree==180)
     5ba:	c4 3b       	cpi	r28, 0xB4	; 180
     5bc:	d1 05       	cpc	r29, r1
     5be:	51 f4       	brne	.+20     	; 0x5d4 <leftd+0x3e>
     5c0:	8f ef       	ldi	r24, 0xFF	; 255
     5c2:	9f e7       	ldi	r25, 0x7F	; 127
     5c4:	a3 e4       	ldi	r26, 0x43	; 67
     5c6:	81 50       	subi	r24, 0x01	; 1
     5c8:	90 40       	sbci	r25, 0x00	; 0
     5ca:	a0 40       	sbci	r26, 0x00	; 0
     5cc:	e1 f7       	brne	.-8      	; 0x5c6 <leftd+0x30>
     5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <leftd+0x3a>
     5d0:	00 00       	nop
     5d2:	19 c0       	rjmp	.+50     	; 0x606 <leftd+0x70>
	_delay_ms(1500);
	else if(degree==5)
     5d4:	c5 30       	cpi	r28, 0x05	; 5
     5d6:	d1 05       	cpc	r29, r1
     5d8:	51 f4       	brne	.+20     	; 0x5ee <leftd+0x58>
     5da:	8f ef       	ldi	r24, 0xFF	; 255
     5dc:	9f e7       	ldi	r25, 0x7F	; 127
     5de:	a4 e0       	ldi	r26, 0x04	; 4
     5e0:	81 50       	subi	r24, 0x01	; 1
     5e2:	90 40       	sbci	r25, 0x00	; 0
     5e4:	a0 40       	sbci	r26, 0x00	; 0
     5e6:	e1 f7       	brne	.-8      	; 0x5e0 <leftd+0x4a>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <leftd+0x54>
     5ea:	00 00       	nop
     5ec:	0c c0       	rjmp	.+24     	; 0x606 <leftd+0x70>
	_delay_ms(100);
	else if(degree==43)
     5ee:	cb 32       	cpi	r28, 0x2B	; 43
     5f0:	d1 05       	cpc	r29, r1
     5f2:	49 f4       	brne	.+18     	; 0x606 <leftd+0x70>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
     5f8:	ac e2       	ldi	r26, 0x2C	; 44
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	a0 40       	sbci	r26, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <leftd+0x64>
     602:	00 c0       	rjmp	.+0      	; 0x604 <leftd+0x6e>
     604:	00 00       	nop
	_delay_ms(1000);
	stop();
     606:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <velocity_control>:
	char PortARestore= 0xF0 & PORTA;
	PORTA =0x00 | PortARestore;
}
void velocity_control(unsigned char left_motor,unsigned char right_motor)   //left_motor and right_motor values varies from 0 to 255(i.e. from minimum to maximum)
{
	OCR5AL=(unsigned char)left_motor;
     610:	80 93 28 01 	sts	0x0128, r24
	OCR5BL=(unsigned char)right_motor;
     614:	60 93 2a 01 	sts	0x012A, r22
}
     618:	08 95       	ret

0000061a <ADC_Conversion>:
unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     61a:	88 30       	cpi	r24, 0x08	; 8
     61c:	18 f0       	brcs	.+6      	; 0x624 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     61e:	98 e0       	ldi	r25, 0x08	; 8
     620:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     624:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20 | Ch;
     626:	80 62       	ori	r24, 0x20	; 32
     628:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
     62c:	ea e7       	ldi	r30, 0x7A	; 122
     62e:	f0 e0       	ldi	r31, 0x00	; 0
     630:	80 81       	ld	r24, Z
     632:	80 64       	ori	r24, 0x40	; 64
     634:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     636:	80 81       	ld	r24, Z
     638:	84 ff       	sbrs	r24, 4
     63a:	fd cf       	rjmp	.-6      	; 0x636 <ADC_Conversion+0x1c>
	a=ADCH;
     63c:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     640:	ea e7       	ldi	r30, 0x7A	; 122
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	90 81       	ld	r25, Z
     646:	90 61       	ori	r25, 0x10	; 16
     648:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     64a:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     64e:	08 95       	ret

00000650 <print_sensor>:

/************** LCD PRINTING USING DIRECT ANALOG SIGNAL UPTO THREE DIGITS **********************/


void print_sensor(char row, char column, unsigned char channel)
{
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	d8 2f       	mov	r29, r24
     656:	c6 2f       	mov	r28, r22
     658:	84 2f       	mov	r24, r20
	unsigned int ADC_Value = ADC_Conversion(channel);
     65a:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     65e:	48 2f       	mov	r20, r24
	lcd_print(row, column, ADC_Value, 3);
     660:	8d 2f       	mov	r24, r29
     662:	6c 2f       	mov	r22, r28
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	23 e0       	ldi	r18, 0x03	; 3
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_print>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <Sharp_GP2D12_estimation>:
unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)            //Function for estimating Actual Distance for corresponding Analog Signals
{
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     678:	68 2f       	mov	r22, r24
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	0e 94 4a 07 	call	0xe94	; 0xe94 <__floatunsisf>
     684:	2f ee       	ldi	r18, 0xEF	; 239
     686:	39 ec       	ldi	r19, 0xC9	; 201
     688:	43 e9       	ldi	r20, 0x93	; 147
     68a:	5f e3       	ldi	r21, 0x3F	; 63
     68c:	0e 94 3b 08 	call	0x1076	; 0x1076 <pow>
     690:	b6 2f       	mov	r27, r22
     692:	a7 2f       	mov	r26, r23
     694:	38 2f       	mov	r19, r24
     696:	29 2f       	mov	r18, r25
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	80 e8       	ldi	r24, 0x80	; 128
     69e:	9f e3       	ldi	r25, 0x3F	; 63
     6a0:	42 2f       	mov	r20, r18
     6a2:	0b 2f       	mov	r16, r27
     6a4:	1a 2f       	mov	r17, r26
     6a6:	23 2f       	mov	r18, r19
     6a8:	34 2f       	mov	r19, r20
     6aa:	a9 01       	movw	r20, r18
     6ac:	98 01       	movw	r18, r16
     6ae:	0e 94 b1 06 	call	0xd62	; 0xd62 <__divsf3>
     6b2:	2a e9       	ldi	r18, 0x9A	; 154
     6b4:	39 ef       	ldi	r19, 0xF9	; 249
     6b6:	4e e2       	ldi	r20, 0x2E	; 46
     6b8:	55 e4       	ldi	r21, 0x45	; 69
     6ba:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__mulsf3>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	40 e2       	ldi	r20, 0x20	; 32
     6c4:	51 e4       	ldi	r21, 0x41	; 65
     6c6:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__mulsf3>
     6ca:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixsfsi>
     6ce:	88 27       	eor	r24, r24
     6d0:	77 fd       	sbrc	r23, 7
     6d2:	80 95       	com	r24
     6d4:	98 2f       	mov	r25, r24
     6d6:	0e 94 4c 07 	call	0xe98	; 0xe98 <__floatsisf>
	distanceInt = (int)distance;
     6da:	0e 94 19 07 	call	0xe32	; 0xe32 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     6de:	86 2f       	mov	r24, r22
     6e0:	97 2f       	mov	r25, r23
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	81 32       	cpi	r24, 0x21	; 33
     6e6:	92 07       	cpc	r25, r18
     6e8:	10 f0       	brcs	.+4      	; 0x6ee <Sharp_GP2D12_estimation+0x7a>
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	93 e0       	ldi	r25, 0x03	; 3
}
     6ee:	1f 91       	pop	r17
     6f0:	0f 91       	pop	r16
     6f2:	08 95       	ret

000006f4 <BasicDrivingProgram>:
void BasicDrivingProgram(unsigned int SharpIR_sensor1,unsigned int SharpIR_sensor2,unsigned int SharpIR_sensor3,unsigned int proximity_sensor_left_3,unsigned int proximity_sensor_frontleft_4,unsigned int proximity_sensor_frontright_5,unsigned int proximity_sensor_right_6,char* distance_confirmation,unsigned int white_line_sensor_left_1,unsigned int white_line_sensor_middle_2,unsigned int white_line_sensor_right_3 )
{
     6f4:	8f 92       	push	r8
     6f6:	9f 92       	push	r9
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	cf 92       	push	r12
     6fe:	df 92       	push	r13
     700:	ef 92       	push	r14
     702:	ff 92       	push	r15
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
	if(SharpIR_sensor2<=200)
     710:	69 3c       	cpi	r22, 0xC9	; 201
     712:	71 05       	cpc	r23, r1
     714:	18 f4       	brcc	.+6      	; 0x71c <BasicDrivingProgram+0x28>
	{
		*distance_confirmation='1';
     716:	81 e3       	ldi	r24, 0x31	; 49
     718:	d5 01       	movw	r26, r10
     71a:	8c 93       	st	X, r24
	}
	if(proximity_sensor_left_3>ProximitySensorTransitionValue && proximity_sensor_frontleft_4>ProximitySensorTransitionValue && proximity_sensor_frontright_5>ProximitySensorTransitionValue && proximity_sensor_right_6>ProximitySensorTransitionValue)
     71c:	29 37       	cpi	r18, 0x79	; 121
     71e:	31 05       	cpc	r19, r1
     720:	70 f0       	brcs	.+28     	; 0x73e <BasicDrivingProgram+0x4a>
     722:	09 37       	cpi	r16, 0x79	; 121
     724:	11 05       	cpc	r17, r1
     726:	58 f0       	brcs	.+22     	; 0x73e <BasicDrivingProgram+0x4a>
     728:	b9 e7       	ldi	r27, 0x79	; 121
     72a:	eb 16       	cp	r14, r27
     72c:	f1 04       	cpc	r15, r1
     72e:	c0 f0       	brcs	.+48     	; 0x760 <BasicDrivingProgram+0x6c>
     730:	e9 e7       	ldi	r30, 0x79	; 121
     732:	ce 16       	cp	r12, r30
     734:	d1 04       	cpc	r13, r1
     736:	a0 f0       	brcs	.+40     	; 0x760 <BasicDrivingProgram+0x6c>
	{
		forward();
     738:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
     73c:	20 c0       	rjmp	.+64     	; 0x77e <BasicDrivingProgram+0x8a>
	}
	else if(( proximity_sensor_left_3<=ProximitySensorTransitionValue || proximity_sensor_frontleft_4<=ProximitySensorTransitionValue) && proximity_sensor_frontright_5>ProximitySensorTransitionValue && proximity_sensor_right_6>ProximitySensorTransitionValue )
     73e:	f9 e7       	ldi	r31, 0x79	; 121
     740:	ef 16       	cp	r14, r31
     742:	f1 04       	cpc	r15, r1
     744:	38 f0       	brcs	.+14     	; 0x754 <BasicDrivingProgram+0x60>
     746:	89 e7       	ldi	r24, 0x79	; 121
     748:	c8 16       	cp	r12, r24
     74a:	d1 04       	cpc	r13, r1
     74c:	18 f0       	brcs	.+6      	; 0x754 <BasicDrivingProgram+0x60>
	{
		left();
     74e:	0e 94 c2 02 	call	0x584	; 0x584 <left>
     752:	15 c0       	rjmp	.+42     	; 0x77e <BasicDrivingProgram+0x8a>
	}
	else if(proximity_sensor_left_3>ProximitySensorTransitionValue && proximity_sensor_frontleft_4>ProximitySensorTransitionValue && (proximity_sensor_frontright_5<=ProximitySensorTransitionValue || proximity_sensor_right_6<=ProximitySensorTransitionValue))
     754:	29 37       	cpi	r18, 0x79	; 121
     756:	31 05       	cpc	r19, r1
     758:	70 f0       	brcs	.+28     	; 0x776 <BasicDrivingProgram+0x82>
     75a:	09 37       	cpi	r16, 0x79	; 121
     75c:	11 05       	cpc	r17, r1
     75e:	58 f0       	brcs	.+22     	; 0x776 <BasicDrivingProgram+0x82>
     760:	99 e7       	ldi	r25, 0x79	; 121
     762:	e9 16       	cp	r14, r25
     764:	f1 04       	cpc	r15, r1
     766:	20 f0       	brcs	.+8      	; 0x770 <BasicDrivingProgram+0x7c>
     768:	a9 e7       	ldi	r26, 0x79	; 121
     76a:	ca 16       	cp	r12, r26
     76c:	d1 04       	cpc	r13, r1
     76e:	18 f4       	brcc	.+6      	; 0x776 <BasicDrivingProgram+0x82>
	{
		right();
     770:	0e 94 b8 02 	call	0x570	; 0x570 <right>
     774:	04 c0       	rjmp	.+8      	; 0x77e <BasicDrivingProgram+0x8a>
	}
	else
	{
		leftd(43);  //For re-orientation
     776:	8b e2       	ldi	r24, 0x2B	; 43
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 cb 02 	call	0x596	; 0x596 <leftd>
	}
	if(white_line_sensor_left_1>WhiteLineTransitionValue || white_line_sensor_middle_2>WhiteLineTransitionValue || white_line_sensor_right_3>WhiteLineTransitionValue)
     77e:	b5 e6       	ldi	r27, 0x65	; 101
     780:	8b 16       	cp	r8, r27
     782:	91 04       	cpc	r9, r1
     784:	50 f4       	brcc	.+20     	; 0x79a <BasicDrivingProgram+0xa6>
     786:	88 89       	ldd	r24, Y+16	; 0x10
     788:	99 89       	ldd	r25, Y+17	; 0x11
     78a:	85 36       	cpi	r24, 0x65	; 101
     78c:	91 05       	cpc	r25, r1
     78e:	28 f4       	brcc	.+10     	; 0x79a <BasicDrivingProgram+0xa6>
     790:	8a 89       	ldd	r24, Y+18	; 0x12
     792:	9b 89       	ldd	r25, Y+19	; 0x13
     794:	85 36       	cpi	r24, 0x65	; 101
     796:	91 05       	cpc	r25, r1
     798:	40 f1       	brcs	.+80     	; 0x7ea <BasicDrivingProgram+0xf6>
	{
		stop();
     79a:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f e7       	ldi	r25, 0x7F	; 127
     7a2:	a6 e1       	ldi	r26, 0x16	; 22
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	90 40       	sbci	r25, 0x00	; 0
     7a8:	a0 40       	sbci	r26, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <BasicDrivingProgram+0xb0>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <BasicDrivingProgram+0xba>
     7ae:	00 00       	nop
		_delay_ms(500);
		backward();
     7b0:	0e 94 a5 02 	call	0x54a	; 0x54a <backward>
     7b4:	8f ef       	ldi	r24, 0xFF	; 255
     7b6:	9f e7       	ldi	r25, 0x7F	; 127
     7b8:	a6 e1       	ldi	r26, 0x16	; 22
     7ba:	81 50       	subi	r24, 0x01	; 1
     7bc:	90 40       	sbci	r25, 0x00	; 0
     7be:	a0 40       	sbci	r26, 0x00	; 0
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <BasicDrivingProgram+0xc6>
     7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <BasicDrivingProgram+0xd0>
     7c4:	00 00       	nop
		_delay_ms(500);
		stop();
     7c6:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9f ef       	ldi	r25, 0xFF	; 255
     7ce:	a8 e0       	ldi	r26, 0x08	; 8
     7d0:	81 50       	subi	r24, 0x01	; 1
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	a0 40       	sbci	r26, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <BasicDrivingProgram+0xdc>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <BasicDrivingProgram+0xe6>
     7da:	00 00       	nop
		_delay_ms(200);
		leftd(180);
     7dc:	84 eb       	ldi	r24, 0xB4	; 180
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	0e 94 cb 02 	call	0x596	; 0x596 <leftd>
		break_out_of_all_loops='1';
     7e4:	81 e3       	ldi	r24, 0x31	; 49
     7e6:	80 93 37 02 	sts	0x0237, r24
	}
}
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	08 95       	ret

00000804 <White_line_sensor_pushing>:
White_line_sensor_pushing(unsigned int SharpIR_sensor1,unsigned int SharpIR_sensor2,unsigned int SharpIR_sensor3,unsigned int proximity_sensor_left_3,unsigned int proximity_sensor_frontleft_4,unsigned int proximity_sensor_frontright_5,unsigned int proximity_sensor_right_6,unsigned int white_line_sensor_left_1,unsigned int white_line_sensor_middle_2,unsigned int white_line_sensor_right_3,char* white_line_check,char* WLS1_flag,char* WLS2_flag,char* WLS3_flag)
{
     804:	8f 92       	push	r8
     806:	9f 92       	push	r9
     808:	af 92       	push	r10
     80a:	bf 92       	push	r11
     80c:	cf 92       	push	r12
     80e:	df 92       	push	r13
     810:	ef 92       	push	r14
     812:	ff 92       	push	r15
     814:	0f 93       	push	r16
     816:	1f 93       	push	r17
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	0f 92       	push	r0
     81e:	cd b7       	in	r28, 0x3d	; 61
     820:	de b7       	in	r29, 0x3e	; 62
     822:	9c 01       	movw	r18, r24
     824:	ed 89       	ldd	r30, Y+21	; 0x15
     826:	fe 89       	ldd	r31, Y+22	; 0x16
     828:	0f 89       	ldd	r16, Y+23	; 0x17
     82a:	18 8d       	ldd	r17, Y+24	; 0x18
     82c:	69 8d       	ldd	r22, Y+25	; 0x19
     82e:	7a 8d       	ldd	r23, Y+26	; 0x1a
	//white_line_check++; statement will be executed and when its value will reach 1 this will be the indication for starting the object pushing mechanism
	char t='0';                 // Dummy Variable required for calling BDP function
     830:	80 e3       	ldi	r24, 0x30	; 48
     832:	89 83       	std	Y+1, r24	; 0x01
	if(white_line_sensor_left_1>WhiteLineTransitionValue)
     834:	85 e6       	ldi	r24, 0x65	; 101
     836:	a8 16       	cp	r10, r24
     838:	b1 04       	cpc	r11, r1
     83a:	10 f0       	brcs	.+4      	; 0x840 <White_line_sensor_pushing+0x3c>
	{
		*WLS1_flag='1';
     83c:	81 e3       	ldi	r24, 0x31	; 49
     83e:	80 83       	st	Z, r24
	}
	if(white_line_sensor_middle_2>WhiteLineTransitionValue)
     840:	a5 e6       	ldi	r26, 0x65	; 101
     842:	8a 16       	cp	r8, r26
     844:	91 04       	cpc	r9, r1
     846:	18 f0       	brcs	.+6      	; 0x84e <White_line_sensor_pushing+0x4a>
	{
		*WLS2_flag='1';
     848:	81 e3       	ldi	r24, 0x31	; 49
     84a:	d8 01       	movw	r26, r16
     84c:	8c 93       	st	X, r24
	}
	if(white_line_sensor_right_3>WhiteLineTransitionValue)
     84e:	89 89       	ldd	r24, Y+17	; 0x11
     850:	9a 89       	ldd	r25, Y+18	; 0x12
     852:	85 36       	cpi	r24, 0x65	; 101
     854:	91 05       	cpc	r25, r1
     856:	18 f0       	brcs	.+6      	; 0x85e <White_line_sensor_pushing+0x5a>
	{
		*WLS3_flag='1';
     858:	81 e3       	ldi	r24, 0x31	; 49
     85a:	db 01       	movw	r26, r22
     85c:	8c 93       	st	X, r24
	}
	if(*WLS1_flag=='1' && *WLS2_flag=='1' && *WLS3_flag=='1')
     85e:	80 81       	ld	r24, Z
     860:	81 33       	cpi	r24, 0x31	; 49
     862:	59 f4       	brne	.+22     	; 0x87a <White_line_sensor_pushing+0x76>
     864:	f8 01       	movw	r30, r16
     866:	80 81       	ld	r24, Z
     868:	81 33       	cpi	r24, 0x31	; 49
     86a:	39 f4       	brne	.+14     	; 0x87a <White_line_sensor_pushing+0x76>
     86c:	db 01       	movw	r26, r22
     86e:	8c 91       	ld	r24, X
     870:	81 33       	cpi	r24, 0x31	; 49
     872:	19 f4       	brne	.+6      	; 0x87a <White_line_sensor_pushing+0x76>
	{
		*white_line_check='1';
     874:	eb 89       	ldd	r30, Y+19	; 0x13
     876:	fc 89       	ldd	r31, Y+20	; 0x14
     878:	80 83       	st	Z, r24
	}
	BasicDrivingProgram(SharpIR_sensor1,300,SharpIR_sensor3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,&t,50,50,50);           //At this point BDP does not need to take care of the black line
     87a:	00 d0       	rcall	.+0      	; 0x87c <White_line_sensor_pushing+0x78>
     87c:	0f 92       	push	r0
     87e:	82 e3       	ldi	r24, 0x32	; 50
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	ed b7       	in	r30, 0x3d	; 61
     884:	fe b7       	in	r31, 0x3e	; 62
     886:	92 83       	std	Z+2, r25	; 0x02
     888:	81 83       	std	Z+1, r24	; 0x01
     88a:	94 83       	std	Z+4, r25	; 0x04
     88c:	83 83       	std	Z+3, r24	; 0x03
     88e:	c9 01       	movw	r24, r18
     890:	6c e2       	ldi	r22, 0x2C	; 44
     892:	71 e0       	ldi	r23, 0x01	; 1
     894:	22 e8       	ldi	r18, 0x82	; 130
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	02 e8       	ldi	r16, 0x82	; 130
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	0f 2e       	mov	r0, r31
     89e:	f2 e8       	ldi	r31, 0x82	; 130
     8a0:	ef 2e       	mov	r14, r31
     8a2:	ff 24       	eor	r15, r15
     8a4:	f0 2d       	mov	r31, r0
     8a6:	0f 2e       	mov	r0, r31
     8a8:	f2 e8       	ldi	r31, 0x82	; 130
     8aa:	cf 2e       	mov	r12, r31
     8ac:	dd 24       	eor	r13, r13
     8ae:	f0 2d       	mov	r31, r0
     8b0:	5e 01       	movw	r10, r28
     8b2:	08 94       	sec
     8b4:	a1 1c       	adc	r10, r1
     8b6:	b1 1c       	adc	r11, r1
     8b8:	0f 2e       	mov	r0, r31
     8ba:	f2 e3       	ldi	r31, 0x32	; 50
     8bc:	8f 2e       	mov	r8, r31
     8be:	99 24       	eor	r9, r9
     8c0:	f0 2d       	mov	r31, r0
     8c2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <BasicDrivingProgram>
	/* HERE WE HAVE GIVEN SOME DEFAULT VALUES TO THE BasicDrivingProgram SO AS ENSURE THAT OUR OBJECTIVE IS FULFILLED */
}
     8c6:	0f 90       	pop	r0
     8c8:	0f 90       	pop	r0
     8ca:	0f 90       	pop	r0
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	08 95       	ret

000008ea <forwardd>:

/**************POSITION CONTROLLED MOVEMENT*************/


void forwardd(int Dist)
{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	ec 01       	movw	r28, r24
	forward();
     8f0:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
	for(int loop=0;loop<Dist;loop++)
     8f4:	1c 16       	cp	r1, r28
     8f6:	1d 06       	cpc	r1, r29
     8f8:	5c f4       	brge	.+22     	; 0x910 <forwardd+0x26>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	e6 e6       	ldi	r30, 0x66	; 102
     900:	f6 e5       	ldi	r31, 0x56	; 86
     902:	31 97       	sbiw	r30, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <forwardd+0x18>
     906:	00 00       	nop
     908:	01 96       	adiw	r24, 0x01	; 1
     90a:	8c 17       	cp	r24, r28
     90c:	9d 07       	cpc	r25, r29
     90e:	b9 f7       	brne	.-18     	; 0x8fe <forwardd+0x14>
	_delay_ms(6);
	stop();
     910:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	08 95       	ret

0000091a <backwardd>:
void backwardd(int Dist)
{
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
	backward();
     920:	0e 94 a5 02 	call	0x54a	; 0x54a <backward>
	for(int loop=0;loop<Dist;loop++)
     924:	1c 16       	cp	r1, r28
     926:	1d 06       	cpc	r1, r29
     928:	5c f4       	brge	.+22     	; 0x940 <backwardd+0x26>
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	e6 e6       	ldi	r30, 0x66	; 102
     930:	f6 e5       	ldi	r31, 0x56	; 86
     932:	31 97       	sbiw	r30, 0x01	; 1
     934:	f1 f7       	brne	.-4      	; 0x932 <backwardd+0x18>
     936:	00 00       	nop
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	8c 17       	cp	r24, r28
     93c:	9d 07       	cpc	r25, r29
     93e:	b9 f7       	brne	.-18     	; 0x92e <backwardd+0x14>
	_delay_ms(6);
	stop();
     940:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <rightd>:
	else if(degree==43)
	_delay_ms(1000);
	stop();
}
void rightd(int degree)
{
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	ec 01       	movw	r28, r24
	right();
     950:	0e 94 b8 02 	call	0x570	; 0x570 <right>
	if(degree==7)
     954:	c7 30       	cpi	r28, 0x07	; 7
     956:	d1 05       	cpc	r29, r1
     958:	51 f4       	brne	.+20     	; 0x96e <rightd+0x24>
     95a:	8f ef       	ldi	r24, 0xFF	; 255
     95c:	9f ef       	ldi	r25, 0xFF	; 255
     95e:	a8 e0       	ldi	r26, 0x08	; 8
     960:	81 50       	subi	r24, 0x01	; 1
     962:	90 40       	sbci	r25, 0x00	; 0
     964:	a0 40       	sbci	r26, 0x00	; 0
     966:	e1 f7       	brne	.-8      	; 0x960 <rightd+0x16>
     968:	00 c0       	rjmp	.+0      	; 0x96a <rightd+0x20>
     96a:	00 00       	nop
     96c:	26 c0       	rjmp	.+76     	; 0x9ba <rightd+0x70>
	_delay_ms(200);
	else if(degree==180)
     96e:	c4 3b       	cpi	r28, 0xB4	; 180
     970:	d1 05       	cpc	r29, r1
     972:	51 f4       	brne	.+20     	; 0x988 <rightd+0x3e>
     974:	8f ef       	ldi	r24, 0xFF	; 255
     976:	9f e7       	ldi	r25, 0x7F	; 127
     978:	a3 e4       	ldi	r26, 0x43	; 67
     97a:	81 50       	subi	r24, 0x01	; 1
     97c:	90 40       	sbci	r25, 0x00	; 0
     97e:	a0 40       	sbci	r26, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <rightd+0x30>
     982:	00 c0       	rjmp	.+0      	; 0x984 <rightd+0x3a>
     984:	00 00       	nop
     986:	19 c0       	rjmp	.+50     	; 0x9ba <rightd+0x70>
	_delay_ms(1500);
	else if(degree==5)
     988:	c5 30       	cpi	r28, 0x05	; 5
     98a:	d1 05       	cpc	r29, r1
     98c:	51 f4       	brne	.+20     	; 0x9a2 <rightd+0x58>
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	9f e7       	ldi	r25, 0x7F	; 127
     992:	a4 e0       	ldi	r26, 0x04	; 4
     994:	81 50       	subi	r24, 0x01	; 1
     996:	90 40       	sbci	r25, 0x00	; 0
     998:	a0 40       	sbci	r26, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <rightd+0x4a>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <rightd+0x54>
     99e:	00 00       	nop
     9a0:	0c c0       	rjmp	.+24     	; 0x9ba <rightd+0x70>
	_delay_ms(100);
	else if(degree==43)
     9a2:	cb 32       	cpi	r28, 0x2B	; 43
     9a4:	d1 05       	cpc	r29, r1
     9a6:	49 f4       	brne	.+18     	; 0x9ba <rightd+0x70>
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	9f ef       	ldi	r25, 0xFF	; 255
     9ac:	ac e2       	ldi	r26, 0x2C	; 44
     9ae:	81 50       	subi	r24, 0x01	; 1
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	a0 40       	sbci	r26, 0x00	; 0
     9b4:	e1 f7       	brne	.-8      	; 0x9ae <rightd+0x64>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <rightd+0x6e>
     9b8:	00 00       	nop
	_delay_ms(1000);
	stop();
     9ba:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
}
     9be:	df 91       	pop	r29
     9c0:	cf 91       	pop	r28
     9c2:	08 95       	ret

000009c4 <__vector_25>:

/**************PROGRAM HANDLING XBEE TO AND FORTH SIGNALS***************/


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
     9c4:	1f 92       	push	r1
     9c6:	0f 92       	push	r0
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	0f 92       	push	r0
     9cc:	11 24       	eor	r1, r1
     9ce:	8f 93       	push	r24
     9d0:	9f 93       	push	r25
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
     9d2:	80 91 c6 00 	lds	r24, 0x00C6
     9d6:	80 93 48 02 	sts	0x0248, r24

	if(data==0x38)
     9da:	88 33       	cpi	r24, 0x38	; 56
     9dc:	21 f4       	brne	.+8      	; 0x9e6 <__vector_25+0x22>
	{
		UDR0 = capture;
     9de:	80 91 38 02 	lds	r24, 0x0238
     9e2:	80 93 c6 00 	sts	0x00C6, r24
	}
	if(data==0x31 || data==0x30)
     9e6:	80 91 48 02 	lds	r24, 0x0248
     9ea:	98 2f       	mov	r25, r24
     9ec:	90 53       	subi	r25, 0x30	; 48
     9ee:	92 30       	cpi	r25, 0x02	; 2
     9f0:	28 f4       	brcc	.+10     	; 0x9fc <__vector_25+0x38>
	{
		i=data;
     9f2:	80 93 3a 02 	sts	0x023A, r24
		UDR0 = data; 				//echo data back to PC
     9f6:	80 93 c6 00 	sts	0x00C6, r24
     9fa:	08 c0       	rjmp	.+16     	; 0xa0c <__vector_25+0x48>
	}
	else if(data==0x32 || data==0x33)
     9fc:	98 2f       	mov	r25, r24
     9fe:	92 53       	subi	r25, 0x32	; 50
     a00:	92 30       	cpi	r25, 0x02	; 2
     a02:	20 f4       	brcc	.+8      	; 0xa0c <__vector_25+0x48>
	{
		j=data;
     a04:	80 93 39 02 	sts	0x0239, r24
		UDR0 = data; 				//echo data back to PC
     a08:	80 93 c6 00 	sts	0x00C6, r24
	}
}
     a0c:	9f 91       	pop	r25
     a0e:	8f 91       	pop	r24
     a10:	0f 90       	pop	r0
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	0f 90       	pop	r0
     a16:	1f 90       	pop	r1
     a18:	18 95       	reti

00000a1a <main>:

/************************* MAIN PROGRAM STARTS ***************************/

 
int main(void)
{
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	00 d0       	rcall	.+0      	; 0xa20 <main+0x6>
     a20:	0f 92       	push	r0
     a22:	0f 92       	push	r0
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
	init_devices();
     a28:	0e 94 8c 02 	call	0x518	; 0x518 <init_devices>
	velocity_control(248,255);
     a2c:	88 ef       	ldi	r24, 0xF8	; 248
     a2e:	6f ef       	ldi	r22, 0xFF	; 255
     a30:	0e 94 08 03 	call	0x610	; 0x610 <velocity_control>
				{
					stop();
					_delay_ms(500);
					capture=0x32;
					lcd_cursor(1,1);
					lcd_string("IMAGE NEAR");
     a34:	0f 2e       	mov	r0, r31
     a36:	fa e0       	ldi	r31, 0x0A	; 10
     a38:	2f 2e       	mov	r2, r31
     a3a:	f2 e0       	ldi	r31, 0x02	; 2
     a3c:	3f 2e       	mov	r3, r31
     a3e:	f0 2d       	mov	r31, r0
{
	init_devices();
	velocity_control(248,255);
	while(1)
	{
		capture=0x31;
     a40:	81 e3       	ldi	r24, 0x31	; 49
     a42:	80 93 38 02 	sts	0x0238, r24
		//command for capturing the image to be sent through Xbee
		//Image processing
		//Will be having an integer i as an output from the processed program
		if(i=='1')
     a46:	80 91 3a 02 	lds	r24, 0x023A
     a4a:	81 33       	cpi	r24, 0x31	; 49
     a4c:	09 f0       	breq	.+2      	; 0xa50 <main+0x36>
     a4e:	6d c1       	rjmp	.+730    	; 0xd2a <main+0x310>
		{
			stop();
     a50:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
			right();
     a54:	0e 94 b8 02 	call	0x570	; 0x570 <right>
     a58:	8f ef       	ldi	r24, 0xFF	; 255
     a5a:	9f eb       	ldi	r25, 0xBF	; 191
     a5c:	a6 e0       	ldi	r26, 0x06	; 6
     a5e:	81 50       	subi	r24, 0x01	; 1
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	a0 40       	sbci	r26, 0x00	; 0
     a64:	e1 f7       	brne	.-8      	; 0xa5e <main+0x44>
     a66:	00 c0       	rjmp	.+0      	; 0xa68 <main+0x4e>
     a68:	00 00       	nop
			_delay_ms(150);
			stop();
     a6a:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
			lcd_cursor(1,1);
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	61 e0       	ldi	r22, 0x01	; 1
     a72:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
			lcd_string("IMAGE FAR");
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_string>
			capture=0x30;
     a7e:	80 e3       	ldi	r24, 0x30	; 48
     a80:	80 93 38 02 	sts	0x0238, r24
			//Basic Driving Program
			while(1)                                   //will break when the object is finally pushed out and bot has returned
			{
				char distance_confirmation='0';        //For denoting if the red block is less than 20 cms from the bot
     a84:	0f 2e       	mov	r0, r31
     a86:	f0 e3       	ldi	r31, 0x30	; 48
     a88:	5f 2e       	mov	r5, r31
     a8a:	f0 2d       	mov	r31, r0
				BasicDrivingProgram(SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,proximity_sensor_left_3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,proximity_sensor_right_6,&distance_confirmation,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3);
				if(distance_confirmation=='1')
				{
					stop();
					_delay_ms(500);
					capture=0x32;
     a8c:	0f 2e       	mov	r0, r31
     a8e:	f2 e3       	ldi	r31, 0x32	; 50
     a90:	4f 2e       	mov	r4, r31
     a92:	f0 2d       	mov	r31, r0
			lcd_string("IMAGE FAR");
			capture=0x30;
			//Basic Driving Program
			while(1)                                   //will break when the object is finally pushed out and bot has returned
			{
				char distance_confirmation='0';        //For denoting if the red block is less than 20 cms from the bot
     a94:	5d 82       	std	Y+5, r5	; 0x05
				int termination=0;                     //for finding the appropriate point for terminating this loop
				unsigned int SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,proximity_sensor_left_3,proximity_sensor_frontleft_4,proximity_sensor_frontright_5,proximity_sensor_right_6,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3;
				SharpIR_sensor1=Sharp_GP2D12_estimation(ADC_Conversion(10));
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     a9c:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     aa0:	7c 01       	movw	r14, r24
				SharpIR_sensor2=Sharp_GP2D12_estimation(ADC_Conversion(11));
     aa2:	8b e0       	ldi	r24, 0x0B	; 11
     aa4:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     aa8:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     aac:	5c 01       	movw	r10, r24
				SharpIR_sensor3=Sharp_GP2D12_estimation(ADC_Conversion(12));
     aae:	8c e0       	ldi	r24, 0x0C	; 12
     ab0:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     ab4:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     ab8:	3c 01       	movw	r6, r24
				proximity_sensor_left_3=ADC_Conversion(4);
     aba:	84 e0       	ldi	r24, 0x04	; 4
     abc:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     ac0:	08 2f       	mov	r16, r24
				proximity_sensor_frontleft_4=ADC_Conversion(5);
     ac2:	85 e0       	ldi	r24, 0x05	; 5
     ac4:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
				proximity_sensor_frontright_5=ADC_Conversion(7);
     ac8:	87 e0       	ldi	r24, 0x07	; 7
     aca:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
				proximity_sensor_right_6=ADC_Conversion(8);
     ace:	88 e0       	ldi	r24, 0x08	; 8
     ad0:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     ad4:	c8 2e       	mov	r12, r24
				white_line_sensor_left_1=ADC_Conversion(3);
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     adc:	88 2e       	mov	r8, r24
				white_line_sensor_middle_2=ADC_Conversion(2);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     ae4:	18 2f       	mov	r17, r24
				white_line_sensor_right_3=ADC_Conversion(1);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
				//Take some sensory inputs
				//feed the inputs to BDC
				BasicDrivingProgram(SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,proximity_sensor_left_3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,proximity_sensor_right_6,&distance_confirmation,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3);
     aec:	00 d0       	rcall	.+0      	; 0xaee <main+0xd4>
     aee:	0f 92       	push	r0
     af0:	ed b7       	in	r30, 0x3d	; 61
     af2:	fe b7       	in	r31, 0x3e	; 62
     af4:	31 96       	adiw	r30, 0x01	; 1
				proximity_sensor_left_3=ADC_Conversion(4);
				proximity_sensor_frontleft_4=ADC_Conversion(5);
				proximity_sensor_frontright_5=ADC_Conversion(7);
				proximity_sensor_right_6=ADC_Conversion(8);
				white_line_sensor_left_1=ADC_Conversion(3);
				white_line_sensor_middle_2=ADC_Conversion(2);
     af6:	ad b7       	in	r26, 0x3d	; 61
     af8:	be b7       	in	r27, 0x3e	; 62
     afa:	11 96       	adiw	r26, 0x01	; 1
     afc:	1c 93       	st	X, r17
     afe:	11 82       	std	Z+1, r1	; 0x01
				white_line_sensor_right_3=ADC_Conversion(1);
     b00:	82 83       	std	Z+2, r24	; 0x02
     b02:	13 82       	std	Z+3, r1	; 0x03
				//Take some sensory inputs
				//feed the inputs to BDC
				BasicDrivingProgram(SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,proximity_sensor_left_3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,proximity_sensor_right_6,&distance_confirmation,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3);
     b04:	c7 01       	movw	r24, r14
     b06:	b5 01       	movw	r22, r10
     b08:	a3 01       	movw	r20, r6
     b0a:	20 2f       	mov	r18, r16
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	02 e8       	ldi	r16, 0x82	; 130
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	0f 2e       	mov	r0, r31
     b14:	f2 e8       	ldi	r31, 0x82	; 130
     b16:	ef 2e       	mov	r14, r31
     b18:	ff 24       	eor	r15, r15
     b1a:	f0 2d       	mov	r31, r0
     b1c:	dd 24       	eor	r13, r13
     b1e:	0f 2e       	mov	r0, r31
     b20:	f5 e0       	ldi	r31, 0x05	; 5
     b22:	af 2e       	mov	r10, r31
     b24:	bb 24       	eor	r11, r11
     b26:	f0 2d       	mov	r31, r0
     b28:	ac 0e       	add	r10, r28
     b2a:	bd 1e       	adc	r11, r29
     b2c:	99 24       	eor	r9, r9
     b2e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <BasicDrivingProgram>
				if(distance_confirmation=='1')
     b32:	0f 90       	pop	r0
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	8d 81       	ldd	r24, Y+5	; 0x05
     b3c:	81 33       	cpi	r24, 0x31	; 49
     b3e:	09 f0       	breq	.+2      	; 0xb42 <main+0x128>
     b40:	a9 cf       	rjmp	.-174    	; 0xa94 <main+0x7a>
				{
					stop();
     b42:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
     b46:	8f ef       	ldi	r24, 0xFF	; 255
     b48:	9f e7       	ldi	r25, 0x7F	; 127
     b4a:	a6 e1       	ldi	r26, 0x16	; 22
     b4c:	81 50       	subi	r24, 0x01	; 1
     b4e:	90 40       	sbci	r25, 0x00	; 0
     b50:	a0 40       	sbci	r26, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <main+0x132>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <main+0x13c>
     b56:	00 00       	nop
					_delay_ms(500);
					capture=0x32;
     b58:	40 92 38 02 	sts	0x0238, r4
					lcd_cursor(1,1);
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
					lcd_string("IMAGE NEAR");
     b64:	c1 01       	movw	r24, r2
     b66:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_string>
					//command for capturing the image
					//image processing and then continuing
					if(j=='2')
     b6a:	80 91 39 02 	lds	r24, 0x0239
     b6e:	82 33       	cpi	r24, 0x32	; 50
     b70:	09 f0       	breq	.+2      	; 0xb74 <main+0x15a>
     b72:	a4 c0       	rjmp	.+328    	; 0xcbc <main+0x2a2>
					{
						capture=0x30;
     b74:	50 92 38 02 	sts	0x0238, r5
						char white_line_check='0';
     b78:	5c 82       	std	Y+4, r5	; 0x04
						char WLS1_flag='0',WLS2_flag='0',WLS3_flag='0';
     b7a:	5b 82       	std	Y+3, r5	; 0x03
     b7c:	5a 82       	std	Y+2, r5	; 0x02
     b7e:	59 82       	std	Y+1, r5	; 0x01
						lcd_cursor(1,1);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	61 e0       	ldi	r22, 0x01	; 1
     b84:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
						lcd_string("ELEMINATING");
     b88:	85 e1       	ldi	r24, 0x15	; 21
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_string>
						while(1)
						{
							//White line sensor inputs and other sensor inputs
							//WhiteLineSensor and pushing mechanism
							SharpIR_sensor1=Sharp_GP2D12_estimation(ADC_Conversion(10));
     b90:	8a e0       	ldi	r24, 0x0A	; 10
     b92:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     b96:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     b9a:	8c 01       	movw	r16, r24
							SharpIR_sensor2=Sharp_GP2D12_estimation(ADC_Conversion(11));
     b9c:	8b e0       	ldi	r24, 0x0B	; 11
     b9e:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     ba2:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     ba6:	7c 01       	movw	r14, r24
							SharpIR_sensor3=Sharp_GP2D12_estimation(ADC_Conversion(12));
     ba8:	8c e0       	ldi	r24, 0x0C	; 12
     baa:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     bae:	0e 94 3a 03 	call	0x674	; 0x674 <Sharp_GP2D12_estimation>
     bb2:	6c 01       	movw	r12, r24
							proximity_sensor_left_3=ADC_Conversion(4);
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
							proximity_sensor_frontleft_4=ADC_Conversion(5);
     bba:	85 e0       	ldi	r24, 0x05	; 5
     bbc:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
							proximity_sensor_frontright_5=ADC_Conversion(7);
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
							proximity_sensor_right_6=ADC_Conversion(8);
     bc6:	88 e0       	ldi	r24, 0x08	; 8
     bc8:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
							white_line_sensor_left_1=ADC_Conversion(3);
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     bd2:	a8 2e       	mov	r10, r24
							white_line_sensor_middle_2=ADC_Conversion(2);
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
     bda:	88 2e       	mov	r8, r24
							white_line_sensor_right_3=ADC_Conversion(1);
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	0e 94 0d 03 	call	0x61a	; 0x61a <ADC_Conversion>
							White_line_sensor_pushing(SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3,&white_line_check,&WLS1_flag,&WLS2_flag,&WLS3_flag);
     be2:	ad b7       	in	r26, 0x3d	; 61
     be4:	be b7       	in	r27, 0x3e	; 62
     be6:	1a 97       	sbiw	r26, 0x0a	; 10
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	be bf       	out	0x3e, r27	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	ad bf       	out	0x3d, r26	; 61
     bf2:	ed b7       	in	r30, 0x3d	; 61
     bf4:	fe b7       	in	r31, 0x3e	; 62
     bf6:	31 96       	adiw	r30, 0x01	; 1
							proximity_sensor_frontleft_4=ADC_Conversion(5);
							proximity_sensor_frontright_5=ADC_Conversion(7);
							proximity_sensor_right_6=ADC_Conversion(8);
							white_line_sensor_left_1=ADC_Conversion(3);
							white_line_sensor_middle_2=ADC_Conversion(2);
							white_line_sensor_right_3=ADC_Conversion(1);
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	8c 93       	st	X, r24
     bfc:	11 82       	std	Z+1, r1	; 0x01
							White_line_sensor_pushing(SharpIR_sensor1,SharpIR_sensor2,SharpIR_sensor3,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,ProximitySensorTransitionValue+10,white_line_sensor_left_1,white_line_sensor_middle_2,white_line_sensor_right_3,&white_line_check,&WLS1_flag,&WLS2_flag,&WLS3_flag);
     bfe:	24 e0       	ldi	r18, 0x04	; 4
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	2c 0f       	add	r18, r28
     c04:	3d 1f       	adc	r19, r29
     c06:	33 83       	std	Z+3, r19	; 0x03
     c08:	22 83       	std	Z+2, r18	; 0x02
     c0a:	83 e0       	ldi	r24, 0x03	; 3
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	8c 0f       	add	r24, r28
     c10:	9d 1f       	adc	r25, r29
     c12:	95 83       	std	Z+5, r25	; 0x05
     c14:	84 83       	std	Z+4, r24	; 0x04
     c16:	a2 e0       	ldi	r26, 0x02	; 2
     c18:	b0 e0       	ldi	r27, 0x00	; 0
     c1a:	ac 0f       	add	r26, r28
     c1c:	bd 1f       	adc	r27, r29
     c1e:	b7 83       	std	Z+7, r27	; 0x07
     c20:	a6 83       	std	Z+6, r26	; 0x06
     c22:	21 e0       	ldi	r18, 0x01	; 1
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	2c 0f       	add	r18, r28
     c28:	3d 1f       	adc	r19, r29
     c2a:	31 87       	std	Z+9, r19	; 0x09
     c2c:	20 87       	std	Z+8, r18	; 0x08
     c2e:	c8 01       	movw	r24, r16
     c30:	b7 01       	movw	r22, r14
     c32:	a6 01       	movw	r20, r12
     c34:	22 e8       	ldi	r18, 0x82	; 130
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	02 e8       	ldi	r16, 0x82	; 130
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	0f 2e       	mov	r0, r31
     c3e:	f2 e8       	ldi	r31, 0x82	; 130
     c40:	ef 2e       	mov	r14, r31
     c42:	ff 24       	eor	r15, r15
     c44:	f0 2d       	mov	r31, r0
     c46:	0f 2e       	mov	r0, r31
     c48:	f2 e8       	ldi	r31, 0x82	; 130
     c4a:	cf 2e       	mov	r12, r31
     c4c:	dd 24       	eor	r13, r13
     c4e:	f0 2d       	mov	r31, r0
     c50:	bb 24       	eor	r11, r11
     c52:	99 24       	eor	r9, r9
     c54:	0e 94 02 04 	call	0x804	; 0x804 <White_line_sensor_pushing>
							if(white_line_check=='1')
     c58:	8d b7       	in	r24, 0x3d	; 61
     c5a:	9e b7       	in	r25, 0x3e	; 62
     c5c:	0a 96       	adiw	r24, 0x0a	; 10
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	f8 94       	cli
     c62:	9e bf       	out	0x3e, r25	; 62
     c64:	0f be       	out	0x3f, r0	; 63
     c66:	8d bf       	out	0x3d, r24	; 61
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	81 33       	cpi	r24, 0x31	; 49
     c6c:	09 f5       	brne	.+66     	; 0xcb0 <main+0x296>
							{
								//new mechanism for going forward a particular distance and again coming back
								buzzer_on();
     c6e:	0e 94 9c 02 	call	0x538	; 0x538 <buzzer_on>
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	9f e7       	ldi	r25, 0x7F	; 127
     c76:	a4 e0       	ldi	r26, 0x04	; 4
     c78:	81 50       	subi	r24, 0x01	; 1
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	a0 40       	sbci	r26, 0x00	; 0
     c7e:	e1 f7       	brne	.-8      	; 0xc78 <main+0x25e>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <main+0x268>
     c82:	00 00       	nop
								_delay_ms(100);
								buzzer_off();
     c84:	0e 94 9e 02 	call	0x53c	; 0x53c <buzzer_off>
								forwardd(Distance);
     c88:	8c ed       	ldi	r24, 0xDC	; 220
     c8a:	95 e0       	ldi	r25, 0x05	; 5
     c8c:	0e 94 75 04 	call	0x8ea	; 0x8ea <forwardd>
								rightd(7);
     c90:	87 e0       	ldi	r24, 0x07	; 7
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	0e 94 a5 04 	call	0x94a	; 0x94a <rightd>
								backwardd(Distance+1000);
     c98:	84 ec       	ldi	r24, 0xC4	; 196
     c9a:	99 e0       	ldi	r25, 0x09	; 9
     c9c:	0e 94 8d 04 	call	0x91a	; 0x91a <backwardd>
								leftd(180);
     ca0:	84 eb       	ldi	r24, 0xB4	; 180
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0e 94 cb 02 	call	0x596	; 0x596 <leftd>
								break;
							}
							if(break_out_of_all_loops=='1')
							break;
						}
						j='b';
     ca8:	82 e6       	ldi	r24, 0x62	; 98
     caa:	80 93 39 02 	sts	0x0239, r24
     cae:	39 c0       	rjmp	.+114    	; 0xd22 <main+0x308>
								backwardd(Distance+1000);
								leftd(180);
								termination=1;
								break;
							}
							if(break_out_of_all_loops=='1')
     cb0:	80 91 37 02 	lds	r24, 0x0237
     cb4:	81 33       	cpi	r24, 0x31	; 49
     cb6:	09 f0       	breq	.+2      	; 0xcba <main+0x2a0>
     cb8:	6b cf       	rjmp	.-298    	; 0xb90 <main+0x176>
     cba:	4f c0       	rjmp	.+158    	; 0xd5a <main+0x340>
							break;
						}
						j='b';
					}
					else if(j=='3' && distance_confirmation=='2')
     cbc:	83 33       	cpi	r24, 0x33	; 51
     cbe:	61 f5       	brne	.+88     	; 0xd18 <main+0x2fe>
     cc0:	8d 81       	ldd	r24, Y+5	; 0x05
     cc2:	82 33       	cpi	r24, 0x32	; 50
     cc4:	49 f5       	brne	.+82     	; 0xd18 <main+0x2fe>
					{
						capture=0x30;
     cc6:	80 e3       	ldi	r24, 0x30	; 48
     cc8:	80 93 38 02 	sts	0x0238, r24
						lcd_cursor(1,1);
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	61 e0       	ldi	r22, 0x01	; 1
     cd0:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
						lcd_string("REORIENTING J");
     cd4:	81 e2       	ldi	r24, 0x21	; 33
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_string>
						right();
     cdc:	0e 94 b8 02 	call	0x570	; 0x570 <right>
     ce0:	8f ef       	ldi	r24, 0xFF	; 255
     ce2:	9f ef       	ldi	r25, 0xFF	; 255
     ce4:	ac e2       	ldi	r26, 0x2C	; 44
     ce6:	81 50       	subi	r24, 0x01	; 1
     ce8:	90 40       	sbci	r25, 0x00	; 0
     cea:	a0 40       	sbci	r26, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <main+0x2cc>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <main+0x2d6>
     cf0:	00 00       	nop
						_delay_ms(1000);
						stop();
     cf2:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
						forward();
     cf6:	0e 94 a0 02 	call	0x540	; 0x540 <forward>
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	9f ef       	ldi	r25, 0xFF	; 255
     cfe:	a0 e5       	ldi	r26, 0x50	; 80
     d00:	81 50       	subi	r24, 0x01	; 1
     d02:	90 40       	sbci	r25, 0x00	; 0
     d04:	a0 40       	sbci	r26, 0x00	; 0
     d06:	e1 f7       	brne	.-8      	; 0xd00 <main+0x2e6>
     d08:	00 c0       	rjmp	.+0      	; 0xd0a <main+0x2f0>
     d0a:	00 00       	nop
						_delay_ms(1800);
						stop();
     d0c:	0e 94 c7 02 	call	0x58e	; 0x58e <stop>
						
						j='b';
     d10:	82 e6       	ldi	r24, 0x62	; 98
     d12:	80 93 39 02 	sts	0x0239, r24
						termination=1;
						break;
     d16:	05 c0       	rjmp	.+10     	; 0xd22 <main+0x308>
				{
					continue;
				}
				if(termination==1)
				break;
				if(break_out_of_all_loops=='1')
     d18:	80 91 37 02 	lds	r24, 0x0237
     d1c:	81 33       	cpi	r24, 0x31	; 49
     d1e:	09 f0       	breq	.+2      	; 0xd22 <main+0x308>
     d20:	b9 ce       	rjmp	.-654    	; 0xa94 <main+0x7a>
				break;
			}
			i='a';
     d22:	81 e6       	ldi	r24, 0x61	; 97
     d24:	80 93 3a 02 	sts	0x023A, r24
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <main+0x338>
		}
		else if(i=='0')
     d2a:	80 33       	cpi	r24, 0x30	; 48
     d2c:	91 f4       	brne	.+36     	; 0xd52 <main+0x338>
		{
			capture=0x30;
     d2e:	80 93 38 02 	sts	0x0238, r24
			leftd(7);        //Rotate and then continue
     d32:	87 e0       	ldi	r24, 0x07	; 7
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	0e 94 cb 02 	call	0x596	; 0x596 <leftd>
			i='a';
     d3a:	81 e6       	ldi	r24, 0x61	; 97
     d3c:	80 93 3a 02 	sts	0x023A, r24
			lcd_cursor(1,1);
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 df 01 	call	0x3be	; 0x3be <lcd_cursor>
			lcd_string("Turning");
     d48:	8f e2       	ldi	r24, 0x2F	; 47
     d4a:	92 e0       	ldi	r25, 0x02	; 2
     d4c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <lcd_string>
			continue;
     d50:	77 ce       	rjmp	.-786    	; 0xa40 <main+0x26>
		}
		break_out_of_all_loops='0';
     d52:	80 e3       	ldi	r24, 0x30	; 48
     d54:	80 93 37 02 	sts	0x0237, r24
     d58:	73 ce       	rjmp	.-794    	; 0xa40 <main+0x26>
								break;
							}
							if(break_out_of_all_loops=='1')
							break;
						}
						j='b';
     d5a:	82 e6       	ldi	r24, 0x62	; 98
     d5c:	80 93 39 02 	sts	0x0239, r24
     d60:	db cf       	rjmp	.-74     	; 0xd18 <main+0x2fe>

00000d62 <__divsf3>:
     d62:	0c d0       	rcall	.+24     	; 0xd7c <__divsf3x>
     d64:	eb c0       	rjmp	.+470    	; 0xf3c <__fp_round>
     d66:	e3 d0       	rcall	.+454    	; 0xf2e <__fp_pscB>
     d68:	40 f0       	brcs	.+16     	; 0xd7a <__divsf3+0x18>
     d6a:	da d0       	rcall	.+436    	; 0xf20 <__fp_pscA>
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <__divsf3+0x18>
     d6e:	21 f4       	brne	.+8      	; 0xd78 <__divsf3+0x16>
     d70:	5f 3f       	cpi	r21, 0xFF	; 255
     d72:	19 f0       	breq	.+6      	; 0xd7a <__divsf3+0x18>
     d74:	cc c0       	rjmp	.+408    	; 0xf0e <__fp_inf>
     d76:	51 11       	cpse	r21, r1
     d78:	15 c1       	rjmp	.+554    	; 0xfa4 <__fp_szero>
     d7a:	cf c0       	rjmp	.+414    	; 0xf1a <__fp_nan>

00000d7c <__divsf3x>:
     d7c:	f0 d0       	rcall	.+480    	; 0xf5e <__fp_split3>
     d7e:	98 f3       	brcs	.-26     	; 0xd66 <__divsf3+0x4>

00000d80 <__divsf3_pse>:
     d80:	99 23       	and	r25, r25
     d82:	c9 f3       	breq	.-14     	; 0xd76 <__divsf3+0x14>
     d84:	55 23       	and	r21, r21
     d86:	b1 f3       	breq	.-20     	; 0xd74 <__divsf3+0x12>
     d88:	95 1b       	sub	r25, r21
     d8a:	55 0b       	sbc	r21, r21
     d8c:	bb 27       	eor	r27, r27
     d8e:	aa 27       	eor	r26, r26
     d90:	62 17       	cp	r22, r18
     d92:	73 07       	cpc	r23, r19
     d94:	84 07       	cpc	r24, r20
     d96:	38 f0       	brcs	.+14     	; 0xda6 <__divsf3_pse+0x26>
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	5f 4f       	sbci	r21, 0xFF	; 255
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	aa 1f       	adc	r26, r26
     da4:	a9 f3       	breq	.-22     	; 0xd90 <__divsf3_pse+0x10>
     da6:	33 d0       	rcall	.+102    	; 0xe0e <__divsf3_pse+0x8e>
     da8:	0e 2e       	mov	r0, r30
     daa:	3a f0       	brmi	.+14     	; 0xdba <__divsf3_pse+0x3a>
     dac:	e0 e8       	ldi	r30, 0x80	; 128
     dae:	30 d0       	rcall	.+96     	; 0xe10 <__divsf3_pse+0x90>
     db0:	91 50       	subi	r25, 0x01	; 1
     db2:	50 40       	sbci	r21, 0x00	; 0
     db4:	e6 95       	lsr	r30
     db6:	00 1c       	adc	r0, r0
     db8:	ca f7       	brpl	.-14     	; 0xdac <__divsf3_pse+0x2c>
     dba:	29 d0       	rcall	.+82     	; 0xe0e <__divsf3_pse+0x8e>
     dbc:	fe 2f       	mov	r31, r30
     dbe:	27 d0       	rcall	.+78     	; 0xe0e <__divsf3_pse+0x8e>
     dc0:	66 0f       	add	r22, r22
     dc2:	77 1f       	adc	r23, r23
     dc4:	88 1f       	adc	r24, r24
     dc6:	bb 1f       	adc	r27, r27
     dc8:	26 17       	cp	r18, r22
     dca:	37 07       	cpc	r19, r23
     dcc:	48 07       	cpc	r20, r24
     dce:	ab 07       	cpc	r26, r27
     dd0:	b0 e8       	ldi	r27, 0x80	; 128
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <__divsf3_pse+0x56>
     dd4:	bb 0b       	sbc	r27, r27
     dd6:	80 2d       	mov	r24, r0
     dd8:	bf 01       	movw	r22, r30
     dda:	ff 27       	eor	r31, r31
     ddc:	93 58       	subi	r25, 0x83	; 131
     dde:	5f 4f       	sbci	r21, 0xFF	; 255
     de0:	2a f0       	brmi	.+10     	; 0xdec <__divsf3_pse+0x6c>
     de2:	9e 3f       	cpi	r25, 0xFE	; 254
     de4:	51 05       	cpc	r21, r1
     de6:	68 f0       	brcs	.+26     	; 0xe02 <__divsf3_pse+0x82>
     de8:	92 c0       	rjmp	.+292    	; 0xf0e <__fp_inf>
     dea:	dc c0       	rjmp	.+440    	; 0xfa4 <__fp_szero>
     dec:	5f 3f       	cpi	r21, 0xFF	; 255
     dee:	ec f3       	brlt	.-6      	; 0xdea <__divsf3_pse+0x6a>
     df0:	98 3e       	cpi	r25, 0xE8	; 232
     df2:	dc f3       	brlt	.-10     	; 0xdea <__divsf3_pse+0x6a>
     df4:	86 95       	lsr	r24
     df6:	77 95       	ror	r23
     df8:	67 95       	ror	r22
     dfa:	b7 95       	ror	r27
     dfc:	f7 95       	ror	r31
     dfe:	9f 5f       	subi	r25, 0xFF	; 255
     e00:	c9 f7       	brne	.-14     	; 0xdf4 <__divsf3_pse+0x74>
     e02:	88 0f       	add	r24, r24
     e04:	91 1d       	adc	r25, r1
     e06:	96 95       	lsr	r25
     e08:	87 95       	ror	r24
     e0a:	97 f9       	bld	r25, 7
     e0c:	08 95       	ret
     e0e:	e1 e0       	ldi	r30, 0x01	; 1
     e10:	66 0f       	add	r22, r22
     e12:	77 1f       	adc	r23, r23
     e14:	88 1f       	adc	r24, r24
     e16:	bb 1f       	adc	r27, r27
     e18:	62 17       	cp	r22, r18
     e1a:	73 07       	cpc	r23, r19
     e1c:	84 07       	cpc	r24, r20
     e1e:	ba 07       	cpc	r27, r26
     e20:	20 f0       	brcs	.+8      	; 0xe2a <__divsf3_pse+0xaa>
     e22:	62 1b       	sub	r22, r18
     e24:	73 0b       	sbc	r23, r19
     e26:	84 0b       	sbc	r24, r20
     e28:	ba 0b       	sbc	r27, r26
     e2a:	ee 1f       	adc	r30, r30
     e2c:	88 f7       	brcc	.-30     	; 0xe10 <__divsf3_pse+0x90>
     e2e:	e0 95       	com	r30
     e30:	08 95       	ret

00000e32 <__fixsfsi>:
     e32:	04 d0       	rcall	.+8      	; 0xe3c <__fixunssfsi>
     e34:	68 94       	set
     e36:	b1 11       	cpse	r27, r1
     e38:	b5 c0       	rjmp	.+362    	; 0xfa4 <__fp_szero>
     e3a:	08 95       	ret

00000e3c <__fixunssfsi>:
     e3c:	98 d0       	rcall	.+304    	; 0xf6e <__fp_splitA>
     e3e:	88 f0       	brcs	.+34     	; 0xe62 <__fixunssfsi+0x26>
     e40:	9f 57       	subi	r25, 0x7F	; 127
     e42:	90 f0       	brcs	.+36     	; 0xe68 <__fixunssfsi+0x2c>
     e44:	b9 2f       	mov	r27, r25
     e46:	99 27       	eor	r25, r25
     e48:	b7 51       	subi	r27, 0x17	; 23
     e4a:	a0 f0       	brcs	.+40     	; 0xe74 <__fixunssfsi+0x38>
     e4c:	d1 f0       	breq	.+52     	; 0xe82 <__fixunssfsi+0x46>
     e4e:	66 0f       	add	r22, r22
     e50:	77 1f       	adc	r23, r23
     e52:	88 1f       	adc	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	1a f0       	brmi	.+6      	; 0xe5e <__fixunssfsi+0x22>
     e58:	ba 95       	dec	r27
     e5a:	c9 f7       	brne	.-14     	; 0xe4e <__fixunssfsi+0x12>
     e5c:	12 c0       	rjmp	.+36     	; 0xe82 <__fixunssfsi+0x46>
     e5e:	b1 30       	cpi	r27, 0x01	; 1
     e60:	81 f0       	breq	.+32     	; 0xe82 <__fixunssfsi+0x46>
     e62:	9f d0       	rcall	.+318    	; 0xfa2 <__fp_zero>
     e64:	b1 e0       	ldi	r27, 0x01	; 1
     e66:	08 95       	ret
     e68:	9c c0       	rjmp	.+312    	; 0xfa2 <__fp_zero>
     e6a:	67 2f       	mov	r22, r23
     e6c:	78 2f       	mov	r23, r24
     e6e:	88 27       	eor	r24, r24
     e70:	b8 5f       	subi	r27, 0xF8	; 248
     e72:	39 f0       	breq	.+14     	; 0xe82 <__fixunssfsi+0x46>
     e74:	b9 3f       	cpi	r27, 0xF9	; 249
     e76:	cc f3       	brlt	.-14     	; 0xe6a <__fixunssfsi+0x2e>
     e78:	86 95       	lsr	r24
     e7a:	77 95       	ror	r23
     e7c:	67 95       	ror	r22
     e7e:	b3 95       	inc	r27
     e80:	d9 f7       	brne	.-10     	; 0xe78 <__fixunssfsi+0x3c>
     e82:	3e f4       	brtc	.+14     	; 0xe92 <__fixunssfsi+0x56>
     e84:	90 95       	com	r25
     e86:	80 95       	com	r24
     e88:	70 95       	com	r23
     e8a:	61 95       	neg	r22
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	8f 4f       	sbci	r24, 0xFF	; 255
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	08 95       	ret

00000e94 <__floatunsisf>:
     e94:	e8 94       	clt
     e96:	09 c0       	rjmp	.+18     	; 0xeaa <__floatsisf+0x12>

00000e98 <__floatsisf>:
     e98:	97 fb       	bst	r25, 7
     e9a:	3e f4       	brtc	.+14     	; 0xeaa <__floatsisf+0x12>
     e9c:	90 95       	com	r25
     e9e:	80 95       	com	r24
     ea0:	70 95       	com	r23
     ea2:	61 95       	neg	r22
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	8f 4f       	sbci	r24, 0xFF	; 255
     ea8:	9f 4f       	sbci	r25, 0xFF	; 255
     eaa:	99 23       	and	r25, r25
     eac:	a9 f0       	breq	.+42     	; 0xed8 <__floatsisf+0x40>
     eae:	f9 2f       	mov	r31, r25
     eb0:	96 e9       	ldi	r25, 0x96	; 150
     eb2:	bb 27       	eor	r27, r27
     eb4:	93 95       	inc	r25
     eb6:	f6 95       	lsr	r31
     eb8:	87 95       	ror	r24
     eba:	77 95       	ror	r23
     ebc:	67 95       	ror	r22
     ebe:	b7 95       	ror	r27
     ec0:	f1 11       	cpse	r31, r1
     ec2:	f8 cf       	rjmp	.-16     	; 0xeb4 <__floatsisf+0x1c>
     ec4:	fa f4       	brpl	.+62     	; 0xf04 <__floatsisf+0x6c>
     ec6:	bb 0f       	add	r27, r27
     ec8:	11 f4       	brne	.+4      	; 0xece <__floatsisf+0x36>
     eca:	60 ff       	sbrs	r22, 0
     ecc:	1b c0       	rjmp	.+54     	; 0xf04 <__floatsisf+0x6c>
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	8f 4f       	sbci	r24, 0xFF	; 255
     ed4:	9f 4f       	sbci	r25, 0xFF	; 255
     ed6:	16 c0       	rjmp	.+44     	; 0xf04 <__floatsisf+0x6c>
     ed8:	88 23       	and	r24, r24
     eda:	11 f0       	breq	.+4      	; 0xee0 <__floatsisf+0x48>
     edc:	96 e9       	ldi	r25, 0x96	; 150
     ede:	11 c0       	rjmp	.+34     	; 0xf02 <__floatsisf+0x6a>
     ee0:	77 23       	and	r23, r23
     ee2:	21 f0       	breq	.+8      	; 0xeec <__floatsisf+0x54>
     ee4:	9e e8       	ldi	r25, 0x8E	; 142
     ee6:	87 2f       	mov	r24, r23
     ee8:	76 2f       	mov	r23, r22
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <__floatsisf+0x5e>
     eec:	66 23       	and	r22, r22
     eee:	71 f0       	breq	.+28     	; 0xf0c <__floatsisf+0x74>
     ef0:	96 e8       	ldi	r25, 0x86	; 134
     ef2:	86 2f       	mov	r24, r22
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	2a f0       	brmi	.+10     	; 0xf04 <__floatsisf+0x6c>
     efa:	9a 95       	dec	r25
     efc:	66 0f       	add	r22, r22
     efe:	77 1f       	adc	r23, r23
     f00:	88 1f       	adc	r24, r24
     f02:	da f7       	brpl	.-10     	; 0xefa <__floatsisf+0x62>
     f04:	88 0f       	add	r24, r24
     f06:	96 95       	lsr	r25
     f08:	87 95       	ror	r24
     f0a:	97 f9       	bld	r25, 7
     f0c:	08 95       	ret

00000f0e <__fp_inf>:
     f0e:	97 f9       	bld	r25, 7
     f10:	9f 67       	ori	r25, 0x7F	; 127
     f12:	80 e8       	ldi	r24, 0x80	; 128
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	08 95       	ret

00000f1a <__fp_nan>:
     f1a:	9f ef       	ldi	r25, 0xFF	; 255
     f1c:	80 ec       	ldi	r24, 0xC0	; 192
     f1e:	08 95       	ret

00000f20 <__fp_pscA>:
     f20:	00 24       	eor	r0, r0
     f22:	0a 94       	dec	r0
     f24:	16 16       	cp	r1, r22
     f26:	17 06       	cpc	r1, r23
     f28:	18 06       	cpc	r1, r24
     f2a:	09 06       	cpc	r0, r25
     f2c:	08 95       	ret

00000f2e <__fp_pscB>:
     f2e:	00 24       	eor	r0, r0
     f30:	0a 94       	dec	r0
     f32:	12 16       	cp	r1, r18
     f34:	13 06       	cpc	r1, r19
     f36:	14 06       	cpc	r1, r20
     f38:	05 06       	cpc	r0, r21
     f3a:	08 95       	ret

00000f3c <__fp_round>:
     f3c:	09 2e       	mov	r0, r25
     f3e:	03 94       	inc	r0
     f40:	00 0c       	add	r0, r0
     f42:	11 f4       	brne	.+4      	; 0xf48 <__fp_round+0xc>
     f44:	88 23       	and	r24, r24
     f46:	52 f0       	brmi	.+20     	; 0xf5c <__fp_round+0x20>
     f48:	bb 0f       	add	r27, r27
     f4a:	40 f4       	brcc	.+16     	; 0xf5c <__fp_round+0x20>
     f4c:	bf 2b       	or	r27, r31
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__fp_round+0x18>
     f50:	60 ff       	sbrs	r22, 0
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <__fp_round+0x20>
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	08 95       	ret

00000f5e <__fp_split3>:
     f5e:	57 fd       	sbrc	r21, 7
     f60:	90 58       	subi	r25, 0x80	; 128
     f62:	44 0f       	add	r20, r20
     f64:	55 1f       	adc	r21, r21
     f66:	59 f0       	breq	.+22     	; 0xf7e <__fp_splitA+0x10>
     f68:	5f 3f       	cpi	r21, 0xFF	; 255
     f6a:	71 f0       	breq	.+28     	; 0xf88 <__fp_splitA+0x1a>
     f6c:	47 95       	ror	r20

00000f6e <__fp_splitA>:
     f6e:	88 0f       	add	r24, r24
     f70:	97 fb       	bst	r25, 7
     f72:	99 1f       	adc	r25, r25
     f74:	61 f0       	breq	.+24     	; 0xf8e <__fp_splitA+0x20>
     f76:	9f 3f       	cpi	r25, 0xFF	; 255
     f78:	79 f0       	breq	.+30     	; 0xf98 <__fp_splitA+0x2a>
     f7a:	87 95       	ror	r24
     f7c:	08 95       	ret
     f7e:	12 16       	cp	r1, r18
     f80:	13 06       	cpc	r1, r19
     f82:	14 06       	cpc	r1, r20
     f84:	55 1f       	adc	r21, r21
     f86:	f2 cf       	rjmp	.-28     	; 0xf6c <__fp_split3+0xe>
     f88:	46 95       	lsr	r20
     f8a:	f1 df       	rcall	.-30     	; 0xf6e <__fp_splitA>
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <__fp_splitA+0x30>
     f8e:	16 16       	cp	r1, r22
     f90:	17 06       	cpc	r1, r23
     f92:	18 06       	cpc	r1, r24
     f94:	99 1f       	adc	r25, r25
     f96:	f1 cf       	rjmp	.-30     	; 0xf7a <__fp_splitA+0xc>
     f98:	86 95       	lsr	r24
     f9a:	71 05       	cpc	r23, r1
     f9c:	61 05       	cpc	r22, r1
     f9e:	08 94       	sec
     fa0:	08 95       	ret

00000fa2 <__fp_zero>:
     fa2:	e8 94       	clt

00000fa4 <__fp_szero>:
     fa4:	bb 27       	eor	r27, r27
     fa6:	66 27       	eor	r22, r22
     fa8:	77 27       	eor	r23, r23
     faa:	cb 01       	movw	r24, r22
     fac:	97 f9       	bld	r25, 7
     fae:	08 95       	ret

00000fb0 <__mulsf3>:
     fb0:	0b d0       	rcall	.+22     	; 0xfc8 <__mulsf3x>
     fb2:	c4 cf       	rjmp	.-120    	; 0xf3c <__fp_round>
     fb4:	b5 df       	rcall	.-150    	; 0xf20 <__fp_pscA>
     fb6:	28 f0       	brcs	.+10     	; 0xfc2 <__mulsf3+0x12>
     fb8:	ba df       	rcall	.-140    	; 0xf2e <__fp_pscB>
     fba:	18 f0       	brcs	.+6      	; 0xfc2 <__mulsf3+0x12>
     fbc:	95 23       	and	r25, r21
     fbe:	09 f0       	breq	.+2      	; 0xfc2 <__mulsf3+0x12>
     fc0:	a6 cf       	rjmp	.-180    	; 0xf0e <__fp_inf>
     fc2:	ab cf       	rjmp	.-170    	; 0xf1a <__fp_nan>
     fc4:	11 24       	eor	r1, r1
     fc6:	ee cf       	rjmp	.-36     	; 0xfa4 <__fp_szero>

00000fc8 <__mulsf3x>:
     fc8:	ca df       	rcall	.-108    	; 0xf5e <__fp_split3>
     fca:	a0 f3       	brcs	.-24     	; 0xfb4 <__mulsf3+0x4>

00000fcc <__mulsf3_pse>:
     fcc:	95 9f       	mul	r25, r21
     fce:	d1 f3       	breq	.-12     	; 0xfc4 <__mulsf3+0x14>
     fd0:	95 0f       	add	r25, r21
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	55 1f       	adc	r21, r21
     fd6:	62 9f       	mul	r22, r18
     fd8:	f0 01       	movw	r30, r0
     fda:	72 9f       	mul	r23, r18
     fdc:	bb 27       	eor	r27, r27
     fde:	f0 0d       	add	r31, r0
     fe0:	b1 1d       	adc	r27, r1
     fe2:	63 9f       	mul	r22, r19
     fe4:	aa 27       	eor	r26, r26
     fe6:	f0 0d       	add	r31, r0
     fe8:	b1 1d       	adc	r27, r1
     fea:	aa 1f       	adc	r26, r26
     fec:	64 9f       	mul	r22, r20
     fee:	66 27       	eor	r22, r22
     ff0:	b0 0d       	add	r27, r0
     ff2:	a1 1d       	adc	r26, r1
     ff4:	66 1f       	adc	r22, r22
     ff6:	82 9f       	mul	r24, r18
     ff8:	22 27       	eor	r18, r18
     ffa:	b0 0d       	add	r27, r0
     ffc:	a1 1d       	adc	r26, r1
     ffe:	62 1f       	adc	r22, r18
    1000:	73 9f       	mul	r23, r19
    1002:	b0 0d       	add	r27, r0
    1004:	a1 1d       	adc	r26, r1
    1006:	62 1f       	adc	r22, r18
    1008:	83 9f       	mul	r24, r19
    100a:	a0 0d       	add	r26, r0
    100c:	61 1d       	adc	r22, r1
    100e:	22 1f       	adc	r18, r18
    1010:	74 9f       	mul	r23, r20
    1012:	33 27       	eor	r19, r19
    1014:	a0 0d       	add	r26, r0
    1016:	61 1d       	adc	r22, r1
    1018:	23 1f       	adc	r18, r19
    101a:	84 9f       	mul	r24, r20
    101c:	60 0d       	add	r22, r0
    101e:	21 1d       	adc	r18, r1
    1020:	82 2f       	mov	r24, r18
    1022:	76 2f       	mov	r23, r22
    1024:	6a 2f       	mov	r22, r26
    1026:	11 24       	eor	r1, r1
    1028:	9f 57       	subi	r25, 0x7F	; 127
    102a:	50 40       	sbci	r21, 0x00	; 0
    102c:	8a f0       	brmi	.+34     	; 0x1050 <__mulsf3_pse+0x84>
    102e:	e1 f0       	breq	.+56     	; 0x1068 <__mulsf3_pse+0x9c>
    1030:	88 23       	and	r24, r24
    1032:	4a f0       	brmi	.+18     	; 0x1046 <__mulsf3_pse+0x7a>
    1034:	ee 0f       	add	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	bb 1f       	adc	r27, r27
    103a:	66 1f       	adc	r22, r22
    103c:	77 1f       	adc	r23, r23
    103e:	88 1f       	adc	r24, r24
    1040:	91 50       	subi	r25, 0x01	; 1
    1042:	50 40       	sbci	r21, 0x00	; 0
    1044:	a9 f7       	brne	.-22     	; 0x1030 <__mulsf3_pse+0x64>
    1046:	9e 3f       	cpi	r25, 0xFE	; 254
    1048:	51 05       	cpc	r21, r1
    104a:	70 f0       	brcs	.+28     	; 0x1068 <__mulsf3_pse+0x9c>
    104c:	60 cf       	rjmp	.-320    	; 0xf0e <__fp_inf>
    104e:	aa cf       	rjmp	.-172    	; 0xfa4 <__fp_szero>
    1050:	5f 3f       	cpi	r21, 0xFF	; 255
    1052:	ec f3       	brlt	.-6      	; 0x104e <__mulsf3_pse+0x82>
    1054:	98 3e       	cpi	r25, 0xE8	; 232
    1056:	dc f3       	brlt	.-10     	; 0x104e <__mulsf3_pse+0x82>
    1058:	86 95       	lsr	r24
    105a:	77 95       	ror	r23
    105c:	67 95       	ror	r22
    105e:	b7 95       	ror	r27
    1060:	f7 95       	ror	r31
    1062:	e7 95       	ror	r30
    1064:	9f 5f       	subi	r25, 0xFF	; 255
    1066:	c1 f7       	brne	.-16     	; 0x1058 <__mulsf3_pse+0x8c>
    1068:	fe 2b       	or	r31, r30
    106a:	88 0f       	add	r24, r24
    106c:	91 1d       	adc	r25, r1
    106e:	96 95       	lsr	r25
    1070:	87 95       	ror	r24
    1072:	97 f9       	bld	r25, 7
    1074:	08 95       	ret

00001076 <pow>:
    1076:	fa 01       	movw	r30, r20
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	30 96       	adiw	r30, 0x00	; 0
    107e:	21 05       	cpc	r18, r1
    1080:	31 05       	cpc	r19, r1
    1082:	99 f1       	breq	.+102    	; 0x10ea <pow+0x74>
    1084:	61 15       	cp	r22, r1
    1086:	71 05       	cpc	r23, r1
    1088:	61 f4       	brne	.+24     	; 0x10a2 <pow+0x2c>
    108a:	80 38       	cpi	r24, 0x80	; 128
    108c:	bf e3       	ldi	r27, 0x3F	; 63
    108e:	9b 07       	cpc	r25, r27
    1090:	49 f1       	breq	.+82     	; 0x10e4 <pow+0x6e>
    1092:	68 94       	set
    1094:	90 38       	cpi	r25, 0x80	; 128
    1096:	81 05       	cpc	r24, r1
    1098:	61 f0       	breq	.+24     	; 0x10b2 <pow+0x3c>
    109a:	80 38       	cpi	r24, 0x80	; 128
    109c:	bf ef       	ldi	r27, 0xFF	; 255
    109e:	9b 07       	cpc	r25, r27
    10a0:	41 f0       	breq	.+16     	; 0x10b2 <pow+0x3c>
    10a2:	99 23       	and	r25, r25
    10a4:	42 f5       	brpl	.+80     	; 0x10f6 <pow+0x80>
    10a6:	ff 3f       	cpi	r31, 0xFF	; 255
    10a8:	e1 05       	cpc	r30, r1
    10aa:	31 05       	cpc	r19, r1
    10ac:	21 05       	cpc	r18, r1
    10ae:	11 f1       	breq	.+68     	; 0x10f4 <pow+0x7e>
    10b0:	e8 94       	clt
    10b2:	08 94       	sec
    10b4:	e7 95       	ror	r30
    10b6:	d9 01       	movw	r26, r18
    10b8:	aa 23       	and	r26, r26
    10ba:	29 f4       	brne	.+10     	; 0x10c6 <pow+0x50>
    10bc:	ab 2f       	mov	r26, r27
    10be:	be 2f       	mov	r27, r30
    10c0:	f8 5f       	subi	r31, 0xF8	; 248
    10c2:	d0 f3       	brcs	.-12     	; 0x10b8 <pow+0x42>
    10c4:	10 c0       	rjmp	.+32     	; 0x10e6 <pow+0x70>
    10c6:	ff 5f       	subi	r31, 0xFF	; 255
    10c8:	70 f4       	brcc	.+28     	; 0x10e6 <pow+0x70>
    10ca:	a6 95       	lsr	r26
    10cc:	e0 f7       	brcc	.-8      	; 0x10c6 <pow+0x50>
    10ce:	f7 39       	cpi	r31, 0x97	; 151
    10d0:	50 f0       	brcs	.+20     	; 0x10e6 <pow+0x70>
    10d2:	19 f0       	breq	.+6      	; 0x10da <pow+0x64>
    10d4:	ff 3a       	cpi	r31, 0xAF	; 175
    10d6:	38 f4       	brcc	.+14     	; 0x10e6 <pow+0x70>
    10d8:	9f 77       	andi	r25, 0x7F	; 127
    10da:	9f 93       	push	r25
    10dc:	0c d0       	rcall	.+24     	; 0x10f6 <pow+0x80>
    10de:	0f 90       	pop	r0
    10e0:	07 fc       	sbrc	r0, 7
    10e2:	90 58       	subi	r25, 0x80	; 128
    10e4:	08 95       	ret
    10e6:	3e f0       	brts	.+14     	; 0x10f6 <pow+0x80>
    10e8:	18 cf       	rjmp	.-464    	; 0xf1a <__fp_nan>
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	9f e3       	ldi	r25, 0x3F	; 63
    10f2:	08 95       	ret
    10f4:	4f e7       	ldi	r20, 0x7F	; 127
    10f6:	9f 77       	andi	r25, 0x7F	; 127
    10f8:	5f 93       	push	r21
    10fa:	4f 93       	push	r20
    10fc:	3f 93       	push	r19
    10fe:	2f 93       	push	r18
    1100:	9e d0       	rcall	.+316    	; 0x123e <log>
    1102:	2f 91       	pop	r18
    1104:	3f 91       	pop	r19
    1106:	4f 91       	pop	r20
    1108:	5f 91       	pop	r21
    110a:	52 df       	rcall	.-348    	; 0xfb0 <__mulsf3>
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <exp>
    110e:	19 f4       	brne	.+6      	; 0x1116 <pow+0xa0>
    1110:	0e f0       	brts	.+2      	; 0x1114 <pow+0x9e>
    1112:	fd ce       	rjmp	.-518    	; 0xf0e <__fp_inf>
    1114:	46 cf       	rjmp	.-372    	; 0xfa2 <__fp_zero>
    1116:	01 cf       	rjmp	.-510    	; 0xf1a <__fp_nan>

00001118 <exp>:
    1118:	2a df       	rcall	.-428    	; 0xf6e <__fp_splitA>
    111a:	c8 f3       	brcs	.-14     	; 0x110e <pow+0x98>
    111c:	96 38       	cpi	r25, 0x86	; 134
    111e:	c0 f7       	brcc	.-16     	; 0x1110 <pow+0x9a>
    1120:	07 f8       	bld	r0, 7
    1122:	0f 92       	push	r0
    1124:	e8 94       	clt
    1126:	2b e3       	ldi	r18, 0x3B	; 59
    1128:	3a ea       	ldi	r19, 0xAA	; 170
    112a:	48 eb       	ldi	r20, 0xB8	; 184
    112c:	5f e7       	ldi	r21, 0x7F	; 127
    112e:	4e df       	rcall	.-356    	; 0xfcc <__mulsf3_pse>
    1130:	0f 92       	push	r0
    1132:	0f 92       	push	r0
    1134:	0f 92       	push	r0
    1136:	4d b7       	in	r20, 0x3d	; 61
    1138:	5e b7       	in	r21, 0x3e	; 62
    113a:	0f 92       	push	r0
    113c:	c0 d0       	rcall	.+384    	; 0x12be <modf>
    113e:	e4 ee       	ldi	r30, 0xE4	; 228
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	16 d0       	rcall	.+44     	; 0x1170 <__fp_powser>
    1144:	4f 91       	pop	r20
    1146:	5f 91       	pop	r21
    1148:	ef 91       	pop	r30
    114a:	ff 91       	pop	r31
    114c:	e5 95       	asr	r30
    114e:	ee 1f       	adc	r30, r30
    1150:	ff 1f       	adc	r31, r31
    1152:	49 f0       	breq	.+18     	; 0x1166 <exp+0x4e>
    1154:	fe 57       	subi	r31, 0x7E	; 126
    1156:	e0 68       	ori	r30, 0x80	; 128
    1158:	44 27       	eor	r20, r20
    115a:	ee 0f       	add	r30, r30
    115c:	44 1f       	adc	r20, r20
    115e:	fa 95       	dec	r31
    1160:	e1 f7       	brne	.-8      	; 0x115a <exp+0x42>
    1162:	41 95       	neg	r20
    1164:	55 0b       	sbc	r21, r21
    1166:	32 d0       	rcall	.+100    	; 0x11cc <ldexp>
    1168:	0f 90       	pop	r0
    116a:	07 fe       	sbrs	r0, 7
    116c:	26 c0       	rjmp	.+76     	; 0x11ba <inverse>
    116e:	08 95       	ret

00001170 <__fp_powser>:
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	1f 93       	push	r17
    1176:	0f 93       	push	r16
    1178:	ff 92       	push	r15
    117a:	ef 92       	push	r14
    117c:	df 92       	push	r13
    117e:	7b 01       	movw	r14, r22
    1180:	8c 01       	movw	r16, r24
    1182:	68 94       	set
    1184:	05 c0       	rjmp	.+10     	; 0x1190 <__fp_powser+0x20>
    1186:	da 2e       	mov	r13, r26
    1188:	ef 01       	movw	r28, r30
    118a:	1e df       	rcall	.-452    	; 0xfc8 <__mulsf3x>
    118c:	fe 01       	movw	r30, r28
    118e:	e8 94       	clt
    1190:	a5 91       	lpm	r26, Z+
    1192:	25 91       	lpm	r18, Z+
    1194:	35 91       	lpm	r19, Z+
    1196:	45 91       	lpm	r20, Z+
    1198:	55 91       	lpm	r21, Z+
    119a:	ae f3       	brts	.-22     	; 0x1186 <__fp_powser+0x16>
    119c:	ef 01       	movw	r28, r30
    119e:	d4 d0       	rcall	.+424    	; 0x1348 <__addsf3x>
    11a0:	fe 01       	movw	r30, r28
    11a2:	97 01       	movw	r18, r14
    11a4:	a8 01       	movw	r20, r16
    11a6:	da 94       	dec	r13
    11a8:	79 f7       	brne	.-34     	; 0x1188 <__fp_powser+0x18>
    11aa:	df 90       	pop	r13
    11ac:	ef 90       	pop	r14
    11ae:	ff 90       	pop	r15
    11b0:	0f 91       	pop	r16
    11b2:	1f 91       	pop	r17
    11b4:	cf 91       	pop	r28
    11b6:	df 91       	pop	r29
    11b8:	08 95       	ret

000011ba <inverse>:
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	70 e0       	ldi	r23, 0x00	; 0
    11c2:	80 e8       	ldi	r24, 0x80	; 128
    11c4:	9f e3       	ldi	r25, 0x3F	; 63
    11c6:	cd cd       	rjmp	.-1126   	; 0xd62 <__divsf3>
    11c8:	a2 ce       	rjmp	.-700    	; 0xf0e <__fp_inf>
    11ca:	11 c1       	rjmp	.+546    	; 0x13ee <__fp_mpack>

000011cc <ldexp>:
    11cc:	d0 de       	rcall	.-608    	; 0xf6e <__fp_splitA>
    11ce:	e8 f3       	brcs	.-6      	; 0x11ca <inverse+0x10>
    11d0:	99 23       	and	r25, r25
    11d2:	d9 f3       	breq	.-10     	; 0x11ca <inverse+0x10>
    11d4:	94 0f       	add	r25, r20
    11d6:	51 1d       	adc	r21, r1
    11d8:	bb f3       	brvs	.-18     	; 0x11c8 <inverse+0xe>
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	50 40       	sbci	r21, 0x00	; 0
    11de:	94 f0       	brlt	.+36     	; 0x1204 <ldexp+0x38>
    11e0:	59 f0       	breq	.+22     	; 0x11f8 <ldexp+0x2c>
    11e2:	88 23       	and	r24, r24
    11e4:	32 f0       	brmi	.+12     	; 0x11f2 <ldexp+0x26>
    11e6:	66 0f       	add	r22, r22
    11e8:	77 1f       	adc	r23, r23
    11ea:	88 1f       	adc	r24, r24
    11ec:	91 50       	subi	r25, 0x01	; 1
    11ee:	50 40       	sbci	r21, 0x00	; 0
    11f0:	c1 f7       	brne	.-16     	; 0x11e2 <ldexp+0x16>
    11f2:	9e 3f       	cpi	r25, 0xFE	; 254
    11f4:	51 05       	cpc	r21, r1
    11f6:	44 f7       	brge	.-48     	; 0x11c8 <inverse+0xe>
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret
    1204:	5f 3f       	cpi	r21, 0xFF	; 255
    1206:	ac f0       	brlt	.+42     	; 0x1232 <ldexp+0x66>
    1208:	98 3e       	cpi	r25, 0xE8	; 232
    120a:	9c f0       	brlt	.+38     	; 0x1232 <ldexp+0x66>
    120c:	bb 27       	eor	r27, r27
    120e:	86 95       	lsr	r24
    1210:	77 95       	ror	r23
    1212:	67 95       	ror	r22
    1214:	b7 95       	ror	r27
    1216:	08 f4       	brcc	.+2      	; 0x121a <ldexp+0x4e>
    1218:	b1 60       	ori	r27, 0x01	; 1
    121a:	93 95       	inc	r25
    121c:	c1 f7       	brne	.-16     	; 0x120e <ldexp+0x42>
    121e:	bb 0f       	add	r27, r27
    1220:	58 f7       	brcc	.-42     	; 0x11f8 <ldexp+0x2c>
    1222:	11 f4       	brne	.+4      	; 0x1228 <ldexp+0x5c>
    1224:	60 ff       	sbrs	r22, 0
    1226:	e8 cf       	rjmp	.-48     	; 0x11f8 <ldexp+0x2c>
    1228:	6f 5f       	subi	r22, 0xFF	; 255
    122a:	7f 4f       	sbci	r23, 0xFF	; 255
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	e3 cf       	rjmp	.-58     	; 0x11f8 <ldexp+0x2c>
    1232:	b8 ce       	rjmp	.-656    	; 0xfa4 <__fp_szero>
    1234:	0e f0       	brts	.+2      	; 0x1238 <ldexp+0x6c>
    1236:	db c0       	rjmp	.+438    	; 0x13ee <__fp_mpack>
    1238:	70 ce       	rjmp	.-800    	; 0xf1a <__fp_nan>
    123a:	68 94       	set
    123c:	68 ce       	rjmp	.-816    	; 0xf0e <__fp_inf>

0000123e <log>:
    123e:	97 de       	rcall	.-722    	; 0xf6e <__fp_splitA>
    1240:	c8 f3       	brcs	.-14     	; 0x1234 <ldexp+0x68>
    1242:	99 23       	and	r25, r25
    1244:	d1 f3       	breq	.-12     	; 0x123a <ldexp+0x6e>
    1246:	c6 f3       	brts	.-16     	; 0x1238 <ldexp+0x6c>
    1248:	df 93       	push	r29
    124a:	cf 93       	push	r28
    124c:	1f 93       	push	r17
    124e:	0f 93       	push	r16
    1250:	ff 92       	push	r15
    1252:	c9 2f       	mov	r28, r25
    1254:	dd 27       	eor	r29, r29
    1256:	88 23       	and	r24, r24
    1258:	2a f0       	brmi	.+10     	; 0x1264 <log+0x26>
    125a:	21 97       	sbiw	r28, 0x01	; 1
    125c:	66 0f       	add	r22, r22
    125e:	77 1f       	adc	r23, r23
    1260:	88 1f       	adc	r24, r24
    1262:	da f7       	brpl	.-10     	; 0x125a <log+0x1c>
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e8       	ldi	r20, 0x80	; 128
    126a:	5f eb       	ldi	r21, 0xBF	; 191
    126c:	9f e3       	ldi	r25, 0x3F	; 63
    126e:	88 39       	cpi	r24, 0x98	; 152
    1270:	20 f0       	brcs	.+8      	; 0x127a <log+0x3c>
    1272:	80 3e       	cpi	r24, 0xE0	; 224
    1274:	30 f0       	brcs	.+12     	; 0x1282 <log+0x44>
    1276:	21 96       	adiw	r28, 0x01	; 1
    1278:	8f 77       	andi	r24, 0x7F	; 127
    127a:	55 d0       	rcall	.+170    	; 0x1326 <__addsf3>
    127c:	ec e0       	ldi	r30, 0x0C	; 12
    127e:	f1 e0       	ldi	r31, 0x01	; 1
    1280:	03 c0       	rjmp	.+6      	; 0x1288 <log+0x4a>
    1282:	51 d0       	rcall	.+162    	; 0x1326 <__addsf3>
    1284:	e9 e3       	ldi	r30, 0x39	; 57
    1286:	f1 e0       	ldi	r31, 0x01	; 1
    1288:	73 df       	rcall	.-282    	; 0x1170 <__fp_powser>
    128a:	8b 01       	movw	r16, r22
    128c:	be 01       	movw	r22, r28
    128e:	ec 01       	movw	r28, r24
    1290:	fb 2e       	mov	r15, r27
    1292:	6f 57       	subi	r22, 0x7F	; 127
    1294:	71 09       	sbc	r23, r1
    1296:	75 95       	asr	r23
    1298:	77 1f       	adc	r23, r23
    129a:	88 0b       	sbc	r24, r24
    129c:	99 0b       	sbc	r25, r25
    129e:	fc dd       	rcall	.-1032   	; 0xe98 <__floatsisf>
    12a0:	28 e1       	ldi	r18, 0x18	; 24
    12a2:	32 e7       	ldi	r19, 0x72	; 114
    12a4:	41 e3       	ldi	r20, 0x31	; 49
    12a6:	5f e3       	ldi	r21, 0x3F	; 63
    12a8:	8f de       	rcall	.-738    	; 0xfc8 <__mulsf3x>
    12aa:	af 2d       	mov	r26, r15
    12ac:	98 01       	movw	r18, r16
    12ae:	ae 01       	movw	r20, r28
    12b0:	ff 90       	pop	r15
    12b2:	0f 91       	pop	r16
    12b4:	1f 91       	pop	r17
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	46 d0       	rcall	.+140    	; 0x1348 <__addsf3x>
    12bc:	3f ce       	rjmp	.-898    	; 0xf3c <__fp_round>

000012be <modf>:
    12be:	fa 01       	movw	r30, r20
    12c0:	dc 01       	movw	r26, r24
    12c2:	aa 0f       	add	r26, r26
    12c4:	bb 1f       	adc	r27, r27
    12c6:	9b 01       	movw	r18, r22
    12c8:	ac 01       	movw	r20, r24
    12ca:	bf 57       	subi	r27, 0x7F	; 127
    12cc:	28 f4       	brcc	.+10     	; 0x12d8 <modf+0x1a>
    12ce:	22 27       	eor	r18, r18
    12d0:	33 27       	eor	r19, r19
    12d2:	44 27       	eor	r20, r20
    12d4:	50 78       	andi	r21, 0x80	; 128
    12d6:	1f c0       	rjmp	.+62     	; 0x1316 <modf+0x58>
    12d8:	b7 51       	subi	r27, 0x17	; 23
    12da:	88 f4       	brcc	.+34     	; 0x12fe <modf+0x40>
    12dc:	ab 2f       	mov	r26, r27
    12de:	00 24       	eor	r0, r0
    12e0:	46 95       	lsr	r20
    12e2:	37 95       	ror	r19
    12e4:	27 95       	ror	r18
    12e6:	01 1c       	adc	r0, r1
    12e8:	a3 95       	inc	r26
    12ea:	d2 f3       	brmi	.-12     	; 0x12e0 <modf+0x22>
    12ec:	00 20       	and	r0, r0
    12ee:	69 f0       	breq	.+26     	; 0x130a <modf+0x4c>
    12f0:	22 0f       	add	r18, r18
    12f2:	33 1f       	adc	r19, r19
    12f4:	44 1f       	adc	r20, r20
    12f6:	b3 95       	inc	r27
    12f8:	da f3       	brmi	.-10     	; 0x12f0 <modf+0x32>
    12fa:	0d d0       	rcall	.+26     	; 0x1316 <modf+0x58>
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <__subsf3>
    12fe:	61 30       	cpi	r22, 0x01	; 1
    1300:	71 05       	cpc	r23, r1
    1302:	a0 e8       	ldi	r26, 0x80	; 128
    1304:	8a 07       	cpc	r24, r26
    1306:	b9 46       	sbci	r27, 0x69	; 105
    1308:	30 f4       	brcc	.+12     	; 0x1316 <modf+0x58>
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
    130e:	66 27       	eor	r22, r22
    1310:	77 27       	eor	r23, r23
    1312:	88 27       	eor	r24, r24
    1314:	90 78       	andi	r25, 0x80	; 128
    1316:	30 96       	adiw	r30, 0x00	; 0
    1318:	21 f0       	breq	.+8      	; 0x1322 <modf+0x64>
    131a:	20 83       	st	Z, r18
    131c:	31 83       	std	Z+1, r19	; 0x01
    131e:	42 83       	std	Z+2, r20	; 0x02
    1320:	53 83       	std	Z+3, r21	; 0x03
    1322:	08 95       	ret

00001324 <__subsf3>:
    1324:	50 58       	subi	r21, 0x80	; 128

00001326 <__addsf3>:
    1326:	bb 27       	eor	r27, r27
    1328:	aa 27       	eor	r26, r26
    132a:	0e d0       	rcall	.+28     	; 0x1348 <__addsf3x>
    132c:	07 ce       	rjmp	.-1010   	; 0xf3c <__fp_round>
    132e:	f8 dd       	rcall	.-1040   	; 0xf20 <__fp_pscA>
    1330:	30 f0       	brcs	.+12     	; 0x133e <__addsf3+0x18>
    1332:	fd dd       	rcall	.-1030   	; 0xf2e <__fp_pscB>
    1334:	20 f0       	brcs	.+8      	; 0x133e <__addsf3+0x18>
    1336:	31 f4       	brne	.+12     	; 0x1344 <__addsf3+0x1e>
    1338:	9f 3f       	cpi	r25, 0xFF	; 255
    133a:	11 f4       	brne	.+4      	; 0x1340 <__addsf3+0x1a>
    133c:	1e f4       	brtc	.+6      	; 0x1344 <__addsf3+0x1e>
    133e:	ed cd       	rjmp	.-1062   	; 0xf1a <__fp_nan>
    1340:	0e f4       	brtc	.+2      	; 0x1344 <__addsf3+0x1e>
    1342:	e0 95       	com	r30
    1344:	e7 fb       	bst	r30, 7
    1346:	e3 cd       	rjmp	.-1082   	; 0xf0e <__fp_inf>

00001348 <__addsf3x>:
    1348:	e9 2f       	mov	r30, r25
    134a:	09 de       	rcall	.-1006   	; 0xf5e <__fp_split3>
    134c:	80 f3       	brcs	.-32     	; 0x132e <__addsf3+0x8>
    134e:	ba 17       	cp	r27, r26
    1350:	62 07       	cpc	r22, r18
    1352:	73 07       	cpc	r23, r19
    1354:	84 07       	cpc	r24, r20
    1356:	95 07       	cpc	r25, r21
    1358:	18 f0       	brcs	.+6      	; 0x1360 <__addsf3x+0x18>
    135a:	71 f4       	brne	.+28     	; 0x1378 <__addsf3x+0x30>
    135c:	9e f5       	brtc	.+102    	; 0x13c4 <__addsf3x+0x7c>
    135e:	21 ce       	rjmp	.-958    	; 0xfa2 <__fp_zero>
    1360:	0e f4       	brtc	.+2      	; 0x1364 <__addsf3x+0x1c>
    1362:	e0 95       	com	r30
    1364:	0b 2e       	mov	r0, r27
    1366:	ba 2f       	mov	r27, r26
    1368:	a0 2d       	mov	r26, r0
    136a:	0b 01       	movw	r0, r22
    136c:	b9 01       	movw	r22, r18
    136e:	90 01       	movw	r18, r0
    1370:	0c 01       	movw	r0, r24
    1372:	ca 01       	movw	r24, r20
    1374:	a0 01       	movw	r20, r0
    1376:	11 24       	eor	r1, r1
    1378:	ff 27       	eor	r31, r31
    137a:	59 1b       	sub	r21, r25
    137c:	99 f0       	breq	.+38     	; 0x13a4 <__addsf3x+0x5c>
    137e:	59 3f       	cpi	r21, 0xF9	; 249
    1380:	50 f4       	brcc	.+20     	; 0x1396 <__addsf3x+0x4e>
    1382:	50 3e       	cpi	r21, 0xE0	; 224
    1384:	68 f1       	brcs	.+90     	; 0x13e0 <__addsf3x+0x98>
    1386:	1a 16       	cp	r1, r26
    1388:	f0 40       	sbci	r31, 0x00	; 0
    138a:	a2 2f       	mov	r26, r18
    138c:	23 2f       	mov	r18, r19
    138e:	34 2f       	mov	r19, r20
    1390:	44 27       	eor	r20, r20
    1392:	58 5f       	subi	r21, 0xF8	; 248
    1394:	f3 cf       	rjmp	.-26     	; 0x137c <__addsf3x+0x34>
    1396:	46 95       	lsr	r20
    1398:	37 95       	ror	r19
    139a:	27 95       	ror	r18
    139c:	a7 95       	ror	r26
    139e:	f0 40       	sbci	r31, 0x00	; 0
    13a0:	53 95       	inc	r21
    13a2:	c9 f7       	brne	.-14     	; 0x1396 <__addsf3x+0x4e>
    13a4:	7e f4       	brtc	.+30     	; 0x13c4 <__addsf3x+0x7c>
    13a6:	1f 16       	cp	r1, r31
    13a8:	ba 0b       	sbc	r27, r26
    13aa:	62 0b       	sbc	r22, r18
    13ac:	73 0b       	sbc	r23, r19
    13ae:	84 0b       	sbc	r24, r20
    13b0:	ba f0       	brmi	.+46     	; 0x13e0 <__addsf3x+0x98>
    13b2:	91 50       	subi	r25, 0x01	; 1
    13b4:	a1 f0       	breq	.+40     	; 0x13de <__addsf3x+0x96>
    13b6:	ff 0f       	add	r31, r31
    13b8:	bb 1f       	adc	r27, r27
    13ba:	66 1f       	adc	r22, r22
    13bc:	77 1f       	adc	r23, r23
    13be:	88 1f       	adc	r24, r24
    13c0:	c2 f7       	brpl	.-16     	; 0x13b2 <__addsf3x+0x6a>
    13c2:	0e c0       	rjmp	.+28     	; 0x13e0 <__addsf3x+0x98>
    13c4:	ba 0f       	add	r27, r26
    13c6:	62 1f       	adc	r22, r18
    13c8:	73 1f       	adc	r23, r19
    13ca:	84 1f       	adc	r24, r20
    13cc:	48 f4       	brcc	.+18     	; 0x13e0 <__addsf3x+0x98>
    13ce:	87 95       	ror	r24
    13d0:	77 95       	ror	r23
    13d2:	67 95       	ror	r22
    13d4:	b7 95       	ror	r27
    13d6:	f7 95       	ror	r31
    13d8:	9e 3f       	cpi	r25, 0xFE	; 254
    13da:	08 f0       	brcs	.+2      	; 0x13de <__addsf3x+0x96>
    13dc:	b3 cf       	rjmp	.-154    	; 0x1344 <__addsf3+0x1e>
    13de:	93 95       	inc	r25
    13e0:	88 0f       	add	r24, r24
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <__addsf3x+0x9e>
    13e4:	99 27       	eor	r25, r25
    13e6:	ee 0f       	add	r30, r30
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	08 95       	ret

000013ee <__fp_mpack>:
    13ee:	9f 3f       	cpi	r25, 0xFF	; 255
    13f0:	31 f0       	breq	.+12     	; 0x13fe <__fp_mpack_finite+0xc>

000013f2 <__fp_mpack_finite>:
    13f2:	91 50       	subi	r25, 0x01	; 1
    13f4:	20 f4       	brcc	.+8      	; 0x13fe <__fp_mpack_finite+0xc>
    13f6:	87 95       	ror	r24
    13f8:	77 95       	ror	r23
    13fa:	67 95       	ror	r22
    13fc:	b7 95       	ror	r27
    13fe:	88 0f       	add	r24, r24
    1400:	91 1d       	adc	r25, r1
    1402:	96 95       	lsr	r25
    1404:	87 95       	ror	r24
    1406:	97 f9       	bld	r25, 7
    1408:	08 95       	ret

0000140a <__udivmodhi4>:
    140a:	aa 1b       	sub	r26, r26
    140c:	bb 1b       	sub	r27, r27
    140e:	51 e1       	ldi	r21, 0x11	; 17
    1410:	07 c0       	rjmp	.+14     	; 0x1420 <__udivmodhi4_ep>

00001412 <__udivmodhi4_loop>:
    1412:	aa 1f       	adc	r26, r26
    1414:	bb 1f       	adc	r27, r27
    1416:	a6 17       	cp	r26, r22
    1418:	b7 07       	cpc	r27, r23
    141a:	10 f0       	brcs	.+4      	; 0x1420 <__udivmodhi4_ep>
    141c:	a6 1b       	sub	r26, r22
    141e:	b7 0b       	sbc	r27, r23

00001420 <__udivmodhi4_ep>:
    1420:	88 1f       	adc	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	5a 95       	dec	r21
    1426:	a9 f7       	brne	.-22     	; 0x1412 <__udivmodhi4_loop>
    1428:	80 95       	com	r24
    142a:	90 95       	com	r25
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	08 95       	ret

00001432 <_exit>:
    1432:	f8 94       	cli

00001434 <__stop_program>:
    1434:	ff cf       	rjmp	.-2      	; 0x1434 <__stop_program>
